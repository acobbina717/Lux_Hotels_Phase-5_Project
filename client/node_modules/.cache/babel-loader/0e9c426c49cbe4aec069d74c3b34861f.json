{"ast":null,"code":"import { jsxs, jsx } from 'react/jsx-runtime';\nimport { useState, useRef, useCallback, useEffect, useMemo } from 'react';\nimport { AriaAnnouncerContext } from './AriaAnnouncerContext.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst DELAY = 150;\n\nconst AriaAnnouncerProvider = _ref => {\n  let {\n    children,\n    style\n  } = _ref;\n  const [currentAnnouncement, setCurrentAnnouncement] = useState(\"\");\n  const announcementsRef = useRef([]);\n  const isAnnouncingRef = useRef(false);\n  const mountedRef = useRef(true);\n  const announceAll = useCallback(() => {\n    isAnnouncingRef.current = true;\n\n    if (announcementsRef.current.length && mountedRef.current) {\n      setCurrentAnnouncement(\"\");\n      requestAnimationFrame(() => {\n        if (mountedRef.current) {\n          const [announcement, ...restAnnouncements] = announcementsRef.current;\n          announcementsRef.current = restAnnouncements;\n          setCurrentAnnouncement(announcement);\n          setTimeout(() => {\n            announceAll();\n          }, DELAY);\n        }\n      });\n    } else {\n      isAnnouncingRef.current = false;\n    }\n  }, []);\n  const announce = useCallback(announcement => {\n    announcementsRef.current = announcementsRef.current.concat(announcement);\n\n    if (!isAnnouncingRef.current) {\n      announceAll();\n    }\n  }, [announceAll]);\n  useEffect(() => () => {\n    mountedRef.current = false;\n  }, []);\n  const value = useMemo(() => ({\n    announce\n  }), [announce]);\n  return /* @__PURE__ */jsxs(AriaAnnouncerContext.Provider, {\n    value,\n    children: [children, /* @__PURE__ */jsx(\"div\", {\n      \"aria-atomic\": \"true\",\n      \"aria-live\": \"assertive\",\n      style: __spreadValues({\n        clip: \"rect(1px, 1px, 1px, 1px)\",\n        clipPath: \"inset(50%)\",\n        height: 1,\n        width: 1,\n        overflow: \"hidden\",\n        padding: 0,\n        position: \"absolute\"\n      }, style),\n      children: currentAnnouncement\n    })]\n  });\n};\n\nexport { AriaAnnouncerProvider, DELAY };","map":{"version":3,"mappings":";;;AAAA;AAAA,IACEA,mBACAC,SACAC,sBAHF;AAUA,IAASC,gCAA4BC,cAArC;AAEA,gBAAaC,GAAQC,MAAI,UAAJ,CAAIC,oBAAzB;;AASA,IAAOC,eAA2B,wBACxBC,OACRC,GADQ,GACHC,SACD;EAAAC;EAAAC;EAAAC;EAAAC;AAAA,EAFI,GAEJC,gBAHN;;IAIEC,cAA0B;EAC1B,wBAAsB,GAAGf,EAAzB,GACA,sBAAwBA,CAAxB,EAAwBA,IAAxB,GACAM,eAAmBN,UAAOgB,OAAPhB,CAAnB;;EAEA,yBACEiB,oCAA+B,GAA/BA,EAA+B;QAC3BC,kBAAgBF,CAAhBE,EAAwBC,IAAxBD,kBACoB,YAACC,IAAD;EACtBC;;;;AAMMC;;2BACQ;EAAA;IAAAC;IAAAd;EAAA;EACX;EACF,sBAAE,aAAF;uBACI;EACLS,yBAAe,CAACM,IAAD,CAAfN;EACD;mBACI;;IAEP,oBAAiBlB,QAAjB,CACEyB,MADF,IACEC,UAAkB,QADpB,EACoB;4BACQ;MACxBL,qBAAKH,CAAe,MAACM;QACnBF,eAAWE,OAAXF,EAAc;UACf;UAEHH;UAAYQ;UACZC;YAEON,WACK;UACVI,CAJF,EAIEA,KAJF;QAKC;MACD,CAXOR,CAAL;IAcJ,CAjBA,MAiBW;qBAA4B;;GApBpC,EAoByC,EApBzC;QAoB0CW,QAAQ;IAACV,gBAAE,QAAF,GAAEA,6CAAF;;IAEtD,IACE,wBADF,EACuB;MAAUL,WAAY;;GAHQ,GAKjDQ,YALiD;EAO/CQ;yBAC8E;EAC9ErB,CAFAqB,EAEArB,EAFAqB;EAGEC,sBAAI,OAA4B;IAChCC;EADgC,CAA5B,CAAJD,EAEAE,CACAC,QADAD,CAFAF;EAKAI,0BAAU;IACVC,KADU;IAEVb,WACDA,QADC,oBAGDc,CAAmB,KAAnBA,EAAmB;MAChB,qBADgB;8BAAA;MAGxB5B;QACFsB,gCADE;8BAAA;iBAAA;gBAAA;0BAAA;kBAAA;;MAAA,SAHwB;;IAAA,CAAnBM,CAHC;EAFU,EAAVF","names":["useState","useCallback","useRef","AriaAnnouncerContext","hasOwnProperty","DELAY","Object","propertyIsEnumerable","__defNormalProp","key","style","__defProp","enumerable","configurable","writable","value","obj","__spreadValues","b","isAnnouncingRef","announcementsRef","prop","requestAnimationFrame","announceAll","children","current","length","mountedRef","setCurrentAnnouncement","setTimeout","announce","aria-live","clip","clipPath","height","width","padding","position","currentAnnouncement"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/aria-announcer/AriaAnnouncerProvider.tsx"],"sourcesContent":["import {\n  useState,\n  useCallback,\n  useRef,\n  useMemo,\n  useEffect,\n  FC,\n  CSSProperties,\n} from \"react\";\n\nimport { AriaAnnouncerContext } from \"./AriaAnnouncerContext\";\n\nexport const DELAY = 150;\n\nexport interface AriaAnnouncerProviderProps {\n  /**\n   * Style overrides for the aria-live element\n   */\n  style?: CSSProperties;\n}\n\nexport const AriaAnnouncerProvider: FC<AriaAnnouncerProviderProps> = ({\n  children,\n  style,\n}) => {\n  const [currentAnnouncement, setCurrentAnnouncement] = useState(\"\");\n  const announcementsRef = useRef<string[]>([]);\n  const isAnnouncingRef = useRef(false);\n  const mountedRef = useRef(true);\n\n  const announceAll = useCallback(() => {\n    isAnnouncingRef.current = true;\n    if (announcementsRef.current.length && mountedRef.current) {\n      setCurrentAnnouncement(\"\");\n      requestAnimationFrame(() => {\n        if (mountedRef.current) {\n          const [announcement, ...restAnnouncements] = announcementsRef.current;\n          announcementsRef.current = restAnnouncements;\n          setCurrentAnnouncement(announcement);\n          setTimeout(() => {\n            announceAll();\n          }, DELAY);\n        }\n      });\n    } else {\n      isAnnouncingRef.current = false;\n    }\n  }, []);\n\n  const announce = useCallback(\n    (announcement) => {\n      announcementsRef.current = announcementsRef.current.concat(announcement);\n      if (!isAnnouncingRef.current) {\n        announceAll();\n      }\n    },\n    [announceAll]\n  );\n\n  useEffect(\n    () => () => {\n      mountedRef.current = false;\n    },\n    []\n  );\n\n  const value = useMemo(() => ({ announce }), [announce]);\n\n  return (\n    <AriaAnnouncerContext.Provider value={value}>\n      {children}\n      <div\n        aria-atomic=\"true\"\n        aria-live=\"assertive\"\n        // hidden styling based on https://webaim.org/techniques/css/invisiblecontent/\n        style={{\n          clip: \"rect(1px, 1px, 1px, 1px)\",\n          clipPath: \"inset(50%)\",\n          height: 1,\n          width: 1,\n          overflow: \"hidden\",\n          padding: 0,\n          position: \"absolute\",\n          ...style,\n        }}\n      >\n        {currentAnnouncement}\n      </div>\n    </AriaAnnouncerContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}