{"ast":null,"code":"export function isCoordinates(array) {\n  return Array.isArray(array) && typeof array[0] === \"number\" && typeof array[1] === \"number\";\n}\nexport function isCoordinatesArray(array) {\n  return isCoordinates(array[0]);\n}\nexport function isNamedLocation(object) {\n  return object && Array.isArray(object.coordinates) && typeof object.coordinates[0] === \"number\" && typeof object.coordinates[1] === \"number\";\n}\nexport function isNamedLocationArray(array) {\n  return isNamedLocation(array[0]);\n}\nexport function isGeofence(object) {\n  return object && typeof object.id === \"string\" && typeof object.geometry === \"object\";\n}\nexport function isGeofenceArray(array) {\n  return Array.isArray(array) && isGeofence(array[0]);\n}\nexport function isGeoJsonSource(source) {\n  return source.type === \"geojson\";\n}\nexport const strHasLength = str => typeof str === \"string\" && str.length > 0;\nexport const getFeaturesFromData = data => {\n  let features;\n\n  if (isCoordinatesArray(data)) {\n    features = data.map(point => {\n      return {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: point\n        },\n        properties: {\n          place_name: `Coordinates,${point}`\n        }\n      };\n    });\n  } else if (isNamedLocationArray(data)) {\n    features = data.map(location => {\n      return {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: location.coordinates\n        },\n        properties: {\n          title: location.title,\n          address: location.address\n        }\n      };\n    });\n  } else {\n    features = data;\n  }\n\n  return features;\n};\nexport const urlEncodePeriods = str => {\n  return str.replace(/\\./g, \"%2E\");\n};","map":{"version":3,"names":["isCoordinates","array","Array","isArray","isCoordinatesArray","isNamedLocation","object","coordinates","isNamedLocationArray","isGeofence","id","geometry","isGeofenceArray","isGeoJsonSource","source","type","strHasLength","str","length","getFeaturesFromData","data","features","map","point","properties","place_name","location","title","address","urlEncodePeriods","replace"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/maplibre-gl-js-amplify/lib/esm/utils.js"],"sourcesContent":["export function isCoordinates(array) {\n    return (Array.isArray(array) &&\n        typeof array[0] === \"number\" &&\n        typeof array[1] === \"number\");\n}\nexport function isCoordinatesArray(array) {\n    return isCoordinates(array[0]);\n}\nexport function isNamedLocation(object) {\n    return (object &&\n        Array.isArray(object.coordinates) &&\n        typeof object.coordinates[0] === \"number\" &&\n        typeof object.coordinates[1] === \"number\");\n}\nexport function isNamedLocationArray(array) {\n    return isNamedLocation(array[0]);\n}\nexport function isGeofence(object) {\n    return (object &&\n        typeof object.id === \"string\" &&\n        typeof object.geometry === \"object\");\n}\nexport function isGeofenceArray(array) {\n    return Array.isArray(array) && isGeofence(array[0]);\n}\nexport function isGeoJsonSource(source) {\n    return source.type === \"geojson\";\n}\nexport const strHasLength = (str) => typeof str === \"string\" && str.length > 0;\nexport const getFeaturesFromData = (data) => {\n    let features;\n    if (isCoordinatesArray(data)) {\n        features = data.map((point) => {\n            return {\n                type: \"Feature\",\n                geometry: { type: \"Point\", coordinates: point },\n                properties: { place_name: `Coordinates,${point}` },\n            };\n        });\n    }\n    else if (isNamedLocationArray(data)) {\n        features = data.map((location) => {\n            return {\n                type: \"Feature\",\n                geometry: { type: \"Point\", coordinates: location.coordinates },\n                properties: { title: location.title, address: location.address },\n            };\n        });\n    }\n    else {\n        features = data;\n    }\n    return features;\n};\nexport const urlEncodePeriods = (str) => {\n    return str.replace(/\\./g, \"%2E\");\n};\n"],"mappings":"AAAA,OAAO,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;EACjC,OAAQC,KAAK,CAACC,OAAN,CAAcF,KAAd,KACJ,OAAOA,KAAK,CAAC,CAAD,CAAZ,KAAoB,QADhB,IAEJ,OAAOA,KAAK,CAAC,CAAD,CAAZ,KAAoB,QAFxB;AAGH;AACD,OAAO,SAASG,kBAAT,CAA4BH,KAA5B,EAAmC;EACtC,OAAOD,aAAa,CAACC,KAAK,CAAC,CAAD,CAAN,CAApB;AACH;AACD,OAAO,SAASI,eAAT,CAAyBC,MAAzB,EAAiC;EACpC,OAAQA,MAAM,IACVJ,KAAK,CAACC,OAAN,CAAcG,MAAM,CAACC,WAArB,CADI,IAEJ,OAAOD,MAAM,CAACC,WAAP,CAAmB,CAAnB,CAAP,KAAiC,QAF7B,IAGJ,OAAOD,MAAM,CAACC,WAAP,CAAmB,CAAnB,CAAP,KAAiC,QAHrC;AAIH;AACD,OAAO,SAASC,oBAAT,CAA8BP,KAA9B,EAAqC;EACxC,OAAOI,eAAe,CAACJ,KAAK,CAAC,CAAD,CAAN,CAAtB;AACH;AACD,OAAO,SAASQ,UAAT,CAAoBH,MAApB,EAA4B;EAC/B,OAAQA,MAAM,IACV,OAAOA,MAAM,CAACI,EAAd,KAAqB,QADjB,IAEJ,OAAOJ,MAAM,CAACK,QAAd,KAA2B,QAF/B;AAGH;AACD,OAAO,SAASC,eAAT,CAAyBX,KAAzB,EAAgC;EACnC,OAAOC,KAAK,CAACC,OAAN,CAAcF,KAAd,KAAwBQ,UAAU,CAACR,KAAK,CAAC,CAAD,CAAN,CAAzC;AACH;AACD,OAAO,SAASY,eAAT,CAAyBC,MAAzB,EAAiC;EACpC,OAAOA,MAAM,CAACC,IAAP,KAAgB,SAAvB;AACH;AACD,OAAO,MAAMC,YAAY,GAAIC,GAAD,IAAS,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACC,MAAJ,GAAa,CAAtE;AACP,OAAO,MAAMC,mBAAmB,GAAIC,IAAD,IAAU;EACzC,IAAIC,QAAJ;;EACA,IAAIjB,kBAAkB,CAACgB,IAAD,CAAtB,EAA8B;IAC1BC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAAUC,KAAD,IAAW;MAC3B,OAAO;QACHR,IAAI,EAAE,SADH;QAEHJ,QAAQ,EAAE;UAAEI,IAAI,EAAE,OAAR;UAAiBR,WAAW,EAAEgB;QAA9B,CAFP;QAGHC,UAAU,EAAE;UAAEC,UAAU,EAAG,eAAcF,KAAM;QAAnC;MAHT,CAAP;IAKH,CANU,CAAX;EAOH,CARD,MASK,IAAIf,oBAAoB,CAACY,IAAD,CAAxB,EAAgC;IACjCC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAAUI,QAAD,IAAc;MAC9B,OAAO;QACHX,IAAI,EAAE,SADH;QAEHJ,QAAQ,EAAE;UAAEI,IAAI,EAAE,OAAR;UAAiBR,WAAW,EAAEmB,QAAQ,CAACnB;QAAvC,CAFP;QAGHiB,UAAU,EAAE;UAAEG,KAAK,EAAED,QAAQ,CAACC,KAAlB;UAAyBC,OAAO,EAAEF,QAAQ,CAACE;QAA3C;MAHT,CAAP;IAKH,CANU,CAAX;EAOH,CARI,MASA;IACDP,QAAQ,GAAGD,IAAX;EACH;;EACD,OAAOC,QAAP;AACH,CAxBM;AAyBP,OAAO,MAAMQ,gBAAgB,GAAIZ,GAAD,IAAS;EACrC,OAAOA,GAAG,CAACa,OAAJ,CAAY,KAAZ,EAAmB,KAAnB,CAAP;AACH,CAFM"},"metadata":{},"sourceType":"module"}