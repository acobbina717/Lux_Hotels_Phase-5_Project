{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport cx from 'classnames';\nimport { forwardRef, useContext } from 'react';\nimport { ControlLabel } from '../control-label/ControlLabel.js';\nimport { createChainedFunction } from '../utils/createChainedFunction.js';\nimport '../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../theme/Theme.js';\nimport { CheckboxBase } from './CheckboxBase.js';\nimport { CheckboxGroupContext } from './internal/CheckboxGroupContext.js';\nimport './Checkbox.css.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst classBase = \"uitkCheckbox\";\nconst Checkbox = /* @__PURE__ */forwardRef(function Checkbox2(props, ref) {\n  var _b;\n\n  const _a = props,\n        {\n    checked: checkedProp,\n    className,\n    defaultChecked: defaultCheckedProp,\n    disabled,\n    indeterminate,\n    inputProps,\n    label,\n    LabelProps,\n    onChange,\n    value\n  } = _a,\n        rest = __objRest(_a, [\"checked\", \"className\", \"defaultChecked\", \"disabled\", \"indeterminate\", \"inputProps\", \"label\", \"LabelProps\", \"onChange\", \"value\"]);\n\n  const groupContext = useContext(CheckboxGroupContext);\n  const handleChange = createChainedFunction(onChange, groupContext == null ? void 0 : groupContext.onChange);\n  let checked = checkedProp;\n  let defaultChecked = defaultCheckedProp;\n\n  if (groupContext) {\n    if (typeof checked === \"undefined\" && typeof value === \"string\") {\n      checked = (_b = groupContext == null ? void 0 : groupContext.checkedValues) == null ? void 0 : _b.includes(value);\n    }\n\n    defaultChecked = void 0;\n  }\n\n  return /* @__PURE__ */jsx(\"div\", __spreadProps(__spreadValues({}, rest), {\n    className: cx(classBase, className, {\n      [`${classBase}-disabled`]: disabled\n    }),\n    \"data-testid\": \"checkbox\",\n    ref,\n    children: /* @__PURE__ */jsx(ControlLabel, __spreadProps(__spreadValues({}, LabelProps), {\n      className: `${classBase}-label`,\n      disabled,\n      label,\n      labelPlacement: \"right\",\n      children: /* @__PURE__ */jsx(CheckboxBase, {\n        checked,\n        disabled,\n        defaultChecked,\n        indeterminate,\n        onChange: handleChange,\n        value\n      })\n    }))\n  }));\n});\nexport { Checkbox };","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AAAA,IAAOA,aAAUC,MAAM,iBAAvB;AACA,qBAAqBC,GAAUD,gCAA/B;AACA,IAASE,mBAAuC,+BAAhD;AACA,IAASC,gCAA6BC,cAAtC;AACA,IAASC,qBAAuC,UAAvCA,CAAuCC,oBAAhD;;AACA,IAASC,6BAA4BC,KAA5BD,KAA4BE,4BAAkCA,GAAlC,EAAkC;EAAAC;EAAAC;EAAAC;EAAAJ;AAAA,CAAlC,IAAkCK,gBAAvE;;AAEA,yBAAwBC,CAAxB,KAAwB;EAOlBC,iBAAYD,aAAZC,EAEC,gBAAc,KAAd,CAAcD,CAAd,EAAcE,IAAd,GAEHC,eACWC,WAAW,MAAXA,CADX;;EAcA,yBAEA,KAAMC,QAAN,IAAMA,mBAAehB,GAArB,EAAqBA;IAKjBiB,gBAAUF,KAAVE,CAAUF,CAAVE,EAAsBJ,IAAtBI,GACAC,eAAiBC,kBAAjBD;EAEJ;SACME;CApCV;;AAsCO;;aAEa,YAAGC,OAAH,KAAa;EAC5B;;EAED,yBAEK,gBAAO,KAAP,CAAOC,MAAP,EAAOT,IAAP,KAAOU,yBAAP,EACDC,eAAqBF,YAArBE;;YACE,IAAIZ,QAASa,0BACd,IAACZ;IACFa,oBAAsBb,IAAtBa,IAAsB,CAAtBA,IAAsBC,+BAAtBD,EACAE,MAAQ,MAARA,GAAQN,YAARM;EAEA;EACG;AACDJ;;AAUEK;AACAxB,cAAK,kBAAOyB;EACZ;;EACW;EAAA;IAAAb;IAAAO;IAAAN;IAAAa;IAAAC;IAAAC;IAAAC;IAAAC;IAAAN;IAAAxB;EAAA;EAAA;;QAEjB+B;EAEL,MAACpB,qGAAD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CANuB,CAAZX","names":["classnames","Object","useContext","ControlLabel","createChainedFunction","hasOwnProperty","CheckboxBase","propertyIsEnumerable","CheckboxGroupContext","value","key","enumerable","configurable","writable","obj","b","classBase","prop","__defNormalProp","checkedProp","handleChange","checked","defaultChecked","defaultCheckedProp","a","undefined","source","exclude","className","__getOwnPropSymbols","data-testid","__propIsEnum","ref","onChange","forwardRef","disabled","indeterminate","inputProps","label","LabelProps","groupContext"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/checkbox/Checkbox.tsx"],"sourcesContent":["import classnames from \"classnames\";\nimport { forwardRef, useContext } from \"react\";\nimport { ControlLabel, ControlLabelProps } from \"../control-label\";\nimport { createChainedFunction } from \"../utils\";\nimport { CheckboxBase, CheckboxBaseProps } from \"./CheckboxBase\";\nimport { CheckboxGroupContext } from \"./internal/CheckboxGroupContext\";\n\nimport \"./Checkbox.css\";\n\nexport interface CheckboxProps extends CheckboxBaseProps {\n  label?: ControlLabelProps[\"label\"];\n  LabelProps?: Partial<ControlLabelProps>;\n}\n\nconst classBase = \"uitkCheckbox\";\n\nexport const Checkbox = forwardRef<HTMLDivElement, CheckboxProps>(\n  function Checkbox(props, ref) {\n    const {\n      checked: checkedProp,\n      className,\n      defaultChecked: defaultCheckedProp,\n      disabled,\n      indeterminate,\n      inputProps,\n      label,\n      LabelProps,\n      onChange,\n      value,\n      ...rest\n    } = props;\n\n    const groupContext = useContext(CheckboxGroupContext);\n\n    const handleChange = createChainedFunction(\n      onChange,\n      groupContext?.onChange\n    );\n\n    let checked = checkedProp;\n    let defaultChecked = defaultCheckedProp;\n\n    if (groupContext) {\n      if (typeof checked === \"undefined\" && typeof value === \"string\") {\n        checked = groupContext?.checkedValues?.includes(value);\n      }\n\n      defaultChecked = undefined;\n    }\n\n    return (\n      <div\n        {...rest}\n        className={classnames(classBase, className, {\n          [`${classBase}-disabled`]: disabled,\n        })}\n        data-testid=\"checkbox\"\n        ref={ref}\n      >\n        <ControlLabel\n          {...LabelProps}\n          className={`${classBase}-label`}\n          disabled={disabled}\n          label={label}\n          labelPlacement={\"right\"}\n        >\n          <CheckboxBase\n            checked={checked}\n            disabled={disabled}\n            defaultChecked={defaultChecked}\n            indeterminate={indeterminate}\n            onChange={handleChange}\n            value={value}\n          />\n        </ControlLabel>\n      </div>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}