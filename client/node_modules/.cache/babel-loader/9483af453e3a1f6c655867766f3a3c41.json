{"ast":null,"code":"import { jsx, jsxs } from 'react/jsx-runtime';\nimport cx from 'classnames';\nimport { forwardRef, useState } from 'react';\nimport '../form-field-context/FormFieldContext.js';\nimport { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';\nimport { makePrefixer } from '../utils/makePrefixer.js';\nimport { useControlled } from '../utils/useControlled.js';\nimport { useForkRef } from '../utils/useForkRef.js';\nimport { useIsFocusVisible } from '../utils/useIsFocusVisible.js';\nimport '../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../theme/Theme.js';\nimport { useRadioGroup } from './internal/useRadioGroup.js';\nimport { RadioIcon } from './RadioIcon.js';\nimport './Radio.css.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst withBaseName = makePrefixer(\"uitkRadio\");\nconst Radio = /* @__PURE__ */forwardRef(function RadioBase(props, ref) {\n  var _b;\n\n  const _a = props,\n        {\n    checked: checkedProp,\n    defaultChecked,\n    name: nameProp,\n    className,\n    disabled: disabledProp,\n    icon: iconProp,\n    value,\n    onFocus,\n    onBlur,\n    onChange,\n    id,\n    tabIndex\n  } = _a,\n        rest = __objRest(_a, [\"checked\", \"defaultChecked\", \"name\", \"className\", \"disabled\", \"icon\", \"value\", \"onFocus\", \"onBlur\", \"onChange\", \"id\", \"tabIndex\"]);\n\n  useFormFieldProps();\n  const radioGroup = useRadioGroup();\n  let radioGroupChecked = checkedProp;\n  let name = nameProp;\n\n  if (radioGroup) {\n    if (typeof radioGroupChecked === \"undefined\") {\n      radioGroupChecked = radioGroup.value === props.value;\n    }\n\n    if (typeof name === \"undefined\") {\n      name = radioGroup.name;\n    }\n  }\n\n  const [checked, setCheckedState] = useControlled({\n    controlled: radioGroupChecked,\n    default: Boolean(defaultChecked),\n    name: \"RadioBase\",\n    state: \"checked\"\n  });\n  const formFieldProps = useFormFieldProps();\n  let disabled = disabledProp;\n\n  if (formFieldProps) {\n    if (typeof disabled === \"undefined\") {\n      disabled = (_b = formFieldProps.a11yProps) == null ? void 0 : _b.disabled;\n    }\n  }\n\n  const [focusVisible, setFocusVisible] = useState(false);\n\n  if (disabled && focusVisible) {\n    setFocusVisible(false);\n  }\n\n  const {\n    isFocusVisibleRef,\n    onFocus: handleFocusVisible,\n    onBlur: handleBlurVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const handleRef = useForkRef(ref, focusVisibleRef);\n\n  const handleFocus = event => {\n    if (formFieldProps && formFieldProps.onFocus) {\n      formFieldProps.onFocus(event);\n    }\n\n    handleFocusVisible(event);\n\n    if (isFocusVisibleRef.current) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  const handleBlur = event => {\n    if (formFieldProps && formFieldProps.onBlur) {\n      formFieldProps.onBlur(event);\n    }\n\n    handleBlurVisible();\n    setFocusVisible(false);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const handleInputChange = event => {\n    const newChecked = event.target.checked;\n    setCheckedState(newChecked);\n\n    if (onChange) {\n      onChange(event);\n    }\n\n    if (radioGroup && radioGroup.onChange) {\n      radioGroup.onChange(event);\n    }\n  };\n\n  const RadioIcon$1 = iconProp || RadioIcon;\n  return /* @__PURE__ */jsx(\"span\", __spreadProps(__spreadValues({\n    className: cx(withBaseName(), {\n      [withBaseName(\"disabled\")]: disabled,\n      [withBaseName(\"focusVisible\")]: focusVisible\n    }, className),\n    ref: handleRef,\n    onBlur: handleBlur,\n    onFocus: handleFocus\n  }, rest), {\n    children: /* @__PURE__ */jsxs(\"span\", {\n      className: withBaseName(\"radioContainer\"),\n      children: [/* @__PURE__ */jsx(\"input\", {\n        className: withBaseName(\"input\"),\n        checked: radioGroupChecked,\n        defaultChecked,\n        disabled,\n        id,\n        name,\n        onChange: handleInputChange,\n        type: \"radio\",\n        value,\n        tabIndex\n      }), /* @__PURE__ */jsx(RadioIcon$1, {\n        checked\n      })]\n    })\n  }));\n});\nexport { Radio };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA;AAAA,IAAOA,aAAUC,MAAM,iBAAvB;AACA,qBAMEC,GAAQD,gCANV;AAQA,IAASE,sBAAiBF,MAAQ,sBAAlC;AACA,IACEG,qBACa,UADbA,CACaC,cAFf;AAMA,IAASC,qBAAqB,UAArBA,CAAqBC,oBAA9B;;AACA,mBAAkB,GAAIC,CAAgBC,GAAhBD,EAAgBE,GAAhBF,EAAgBG,KAAhBH,KAAgBE,GAAwB,OAAxB,GAAwBE,SAAc;EAAAC;EAAAC;EAAAC;EAAAJ;AAAA,EAAtC,GAAsCF,gBAA5E;;AAEA,qBAAqB;EAErB,iBAAqBL,aAArB,EAsBO,gBAAW,KAAX,CAAWY,CAAX,EAAWC,IAAX,GAICC,eACKC,WAAW,MAAXA,CADL;;EAgBN,yBAEA,SAAgBF,IAAhB,IAAgBG,mBAAmB,GAAnC,EAAmC;IAE/BC,sBAAoBF,CAApBE,EAAoBF,IAApBE,GACAC,eAAe,CAACC,CAAD,EAACN,IAAD,EAACD,OAAD,CAAfM;EACJ;EACE;CAnDJ;;AAqDK;;AACD,aAAWA,YAASE,OAATF,KAAS;EAClBA;;EACD,yBACF,kEAEDG,MAAc,MAAd,GAAcC,YAAd;;EACEC,sBAA6BP,mBAA7BO,EACAC,iBAASC,mBAAuB,QAAhCD,EAAgC;IAChCN,WAAiB,QAAjBA,CAAiBL,IAAjBK,IAAiB,CAAjBA,IAAiBQ,+BAAjBR,EACAS,OAAOd,IAAPc,IAAgBL,YAAhBK;EACD;EAED;CAZE;;AAwBD;AAGCC,uCACSC,oBACHC,KADGD,EACHE,GADGF,EACH;MAIFG;;EAKN,QAAMC,GAAWH,KAAjB;EAAA,MAAiB;IAAAI,OAAoCC,EAAUpB,WAA9C;IAA8CqB,cAA9C;IAA8ClB,cAA9C;IAA8CmB,SAA9C;IAA8CC,sBAA9C;IAA8CC,cAA9C;IAA8ChC,KAA9C;IAA8CiC,OAA9C;IAA8CC,MAA9C;IAA8CC,QAA9C;IAA8CC,EAA9C;IAA8CC;EAA9C,IAA8CC,EAA/D;EAAA,MAA+DC,wJAA/D;;EACoB/C,iBAAkB;EAClCgD,gCAAsB,EAAtBA;EACD;UACiB;;kBACdnB;eACaX,sBAAO;MACvBA;IACD;;eACSC,SAAM,aAAE;MAChBA;IACF;EAED;;EACE,gBAAkB8B,eAAlB,IAAoCC,cAAO;IACzCF,6BADyC;IAE1CvB,gCAF0C;IAG3C0B,iBAH2C;SAI5B;EAJ4B,CAAP,CAApC;sBAMc,GAACnD,iBAAC;EACf;;MACDgD;IAEF,WAAuBT,QAAvB,KAAuB,WAAvB,EAA2E;MACzEA,QAAMa,uBAAyB,UAAzBA,KAAkC,IAAlCA,GAAkC,MAAlCA,GAAkCC,WAAxC;;EAEA;;uBACgBC,mBAAEvD;;EACjB;IACDuD,eAAc,OAAd;EACEC;;EACD;IAAA1B;IAAAY;IAAAC;IAAAV;EAAA;QACDC;;EAEF,iBAAe,GAAWG,KAARoB,IAAQ;IAE1B,oCACO,QADP,EACO;MACHlB,cAAWzC,QAAXyC,CAAqBF,KAArBE;IAGI;;IACAR;;IACD,qBAEF,QAFE,EAEF;MACDE,eAAc,MAAdA;IACAU;;IACAD,aAASP;MACRO,OAAO,OAAP;IAED;EAAMH,CAjBV;;;IAkBM,oCAAM,OAAN,EAAM;MACJA;IACAH;;IACAE;IACAE;;IACAK;MACAzB;IACAwB;EACAc;;EACAjD,uBAAK,GAAO4B;IACZS,wBAAQ,OAARA,CAAkBV,OAAlBU;IACAI;;IACF;MAAWd;IAAoB;;;MAC1BoB;;EAGV,CAPO/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAxEGsB,CADTD","names":["classnames","Object","useState","useFormFieldProps","makePrefixer","hasOwnProperty","useRadioGroup","propertyIsEnumerable","DefaultRadioIcon","obj","key","value","__defProp","enumerable","configurable","writable","b","prop","__defNormalProp","checkedProp","__getOwnPropSymbols","radioGroupChecked","name","a","exclude","target","source","controlled","default","Boolean","__propIsEnum","state","isFocusVisibleRef","handleFocusVisible","props","ref","handleRef","handleFocus","checked","event","defaultChecked","className","disabled","icon","onFocus","onBlur","onChange","id","tabIndex","_a","rest","formFieldProps","setCheckedState","useControlled","handleBlurVisible","newChecked","_b","setFocusVisible","radioGroup","iconProp","type"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/radio-button/Radio.tsx"],"sourcesContent":["import classnames from \"classnames\";\nimport {\n  ChangeEventHandler,\n  FC,\n  FocusEventHandler,\n  forwardRef,\n  Ref,\n  useState,\n} from \"react\";\nimport { useFormFieldProps } from \"../form-field-context\";\nimport {\n  makePrefixer,\n  useControlled,\n  useForkRef,\n  useIsFocusVisible,\n} from \"../utils\";\nimport { useRadioGroup } from \"./internal/useRadioGroup\";\nimport { RadioIcon as DefaultRadioIcon, RadioIconProps } from \"./RadioIcon\";\n\nimport \"./Radio.css\";\n\nconst withBaseName = makePrefixer(\"uitkRadio\");\n\nexport interface RadioProps {\n  checked?: boolean;\n  className?: string;\n  disabled?: boolean;\n  emphasis?: \"low\" | \"medium\" | \"high\";\n  /**\n   * custom icon component\n   */\n  icon?: FC<RadioIconProps>;\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n  name?: string;\n  defaultChecked?: boolean;\n  onFocus?: FocusEventHandler<HTMLSpanElement>;\n  onBlur?: FocusEventHandler<HTMLSpanElement>;\n  required?: boolean;\n  id?: string;\n  value?: string;\n  tabIndex?: number;\n}\n\nexport const Radio = forwardRef<HTMLSpanElement, RadioProps>(function RadioBase(\n  props,\n  ref\n) {\n  const {\n    checked: checkedProp,\n    defaultChecked,\n    name: nameProp,\n    className,\n    disabled: disabledProp,\n    icon: iconProp,\n    value,\n    onFocus,\n    onBlur,\n    onChange,\n    id,\n    tabIndex,\n    ...rest\n  } = props;\n\n  const { inFormField } = useFormFieldProps();\n\n  const radioGroup = useRadioGroup();\n\n  let radioGroupChecked = checkedProp;\n  let name = nameProp;\n  if (radioGroup) {\n    if (typeof radioGroupChecked === \"undefined\") {\n      radioGroupChecked = radioGroup.value === props.value;\n    }\n    if (typeof name === \"undefined\") {\n      name = radioGroup.name;\n    }\n  }\n\n  const [checked, setCheckedState] = useControlled({\n    controlled: radioGroupChecked,\n    default: Boolean(defaultChecked),\n    name: \"RadioBase\",\n    state: \"checked\",\n  });\n\n  const formFieldProps = useFormFieldProps();\n\n  let disabled = disabledProp;\n  if (formFieldProps) {\n    if (typeof disabled === \"undefined\") {\n      disabled = formFieldProps.a11yProps?.disabled;\n    }\n  }\n\n  const [focusVisible, setFocusVisible] = useState(false);\n  if (disabled && focusVisible) {\n    setFocusVisible(false);\n  }\n\n  const {\n    isFocusVisibleRef,\n    onFocus: handleFocusVisible,\n    onBlur: handleBlurVisible,\n    ref: focusVisibleRef,\n  } = useIsFocusVisible();\n\n  const handleRef = useForkRef<HTMLSpanElement>(\n    ref,\n    focusVisibleRef as Ref<HTMLSpanElement>\n  );\n\n  const handleFocus: FocusEventHandler<HTMLElement> = (event) => {\n    if (formFieldProps && formFieldProps.onFocus) {\n      formFieldProps.onFocus(event);\n    }\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current) {\n      setFocusVisible(true);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  const handleBlur: FocusEventHandler<HTMLElement> = (event) => {\n    if (formFieldProps && formFieldProps.onBlur) {\n      formFieldProps.onBlur(event);\n    }\n    handleBlurVisible();\n    setFocusVisible(false);\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const handleInputChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n    const newChecked = event.target.checked;\n    setCheckedState(newChecked);\n    if (onChange) {\n      onChange(event);\n    }\n    if (radioGroup && radioGroup.onChange) {\n      radioGroup.onChange(event);\n    }\n  };\n\n  const RadioIcon = iconProp || DefaultRadioIcon;\n\n  return (\n    <span\n      className={classnames(\n        withBaseName(),\n        {\n          [withBaseName(\"disabled\")]: disabled,\n          [withBaseName(\"focusVisible\")]: focusVisible,\n        },\n        className\n      )}\n      ref={handleRef}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      {...rest}\n    >\n      <span className={withBaseName(\"radioContainer\")}>\n        <input\n          className={withBaseName(\"input\")}\n          checked={radioGroupChecked}\n          defaultChecked={defaultChecked}\n          disabled={disabled}\n          id={id}\n          name={name}\n          onChange={handleInputChange}\n          type=\"radio\"\n          value={value}\n          tabIndex={tabIndex}\n        />\n        <RadioIcon checked={checked} />\n      </span>\n    </span>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}