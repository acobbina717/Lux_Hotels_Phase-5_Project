{"ast":null,"code":"class Theme {\n  constructor(id, name) {\n    this.id = id;\n    this.name = name;\n  }\n\n  getCharacteristicValue(characteristicName, variant, scopeElement) {\n    const cssVariableName = `--uitk-${characteristicName}-${variant}`;\n    const scopeTarget = scopeElement || document.body.querySelector(`.uitk-${this.id}`);\n\n    if (scopeTarget) {\n      const style = getComputedStyle(scopeTarget);\n      const variableValue = style.getPropertyValue(cssVariableName);\n\n      if (variableValue) {\n        return variableValue;\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst lightTheme = new Theme(\"uitk-light\", \"light\");\nconst darkTheme = new Theme(\"uitk-dark\", \"dark\");\nconst toolkitThemes = /* @__PURE__ */new Map([[\"light\", lightTheme], [\"dark\", darkTheme]]);\nconst DEFAULT_THEME = lightTheme;\n\nconst getTheme = themeName => {\n  if (typeof themeName === \"string\") {\n    if (!toolkitThemes.has(themeName)) {\n      toolkitThemes.set(themeName, new Theme(themeName, themeName));\n    }\n\n    return [toolkitThemes.get(themeName)];\n  } else if (Array.isArray(themeName) && themeName.length > 0) {\n    return themeName.flatMap(getTheme);\n  } else {\n    return [DEFAULT_THEME];\n  }\n};\n\nexport { DEFAULT_THEME, Theme, getTheme };","map":{"version":3,"mappings":"AAwBO,MAAMA,KAAN,CAAW;aAGJC,KAAUC,IAAVD,EAAwB;IAClC,UAAKA,EAAL;IACA,YAAKC,IAAL;EACD;;EAEDC,2CACoCC,OADpCD,EAEiBE,YAFjBF,EAG4B;IAE1B,qBAAqB,aAAIG,kBAASA,IAAkBF,OAAIA,EAAxD;IACA,gCACEC,IAAYE,QAAY,KAAZ,CAAaC,aAAb,CAAkBC,SAAe,KAAYR,IAA7C,CADd;;IAEA;MACE,8BAAcS,aAAd;YACAC,aAAMA,SAAgBC,gBAAhBD,CAAgBC,eAAhBD;;MACN;QACE;MACD;IACF;;IACD;EACD;;AAxBe;;AA2BlB,MAAME,UAAU,GAAG,IAAIb,KAAJ,CAAU,YAAV,EAAwB,OAAxB,CAAnB;AACA,MAAMc,SAAS,GAAG,IAAId,KAAJ,CAAU,WAAV,EAAuB,MAAvB,CAAlB;AAEA,MAAMe,aAAa,kBAA+B,SAChD,qBADgD,EAEhD,mBAFgD,EAAlD;AAKaC,mBAAa,GAAGH,UAAhBG;;AAEAC,cAAQ,GAAIC,SAAD,IAA2C;EACjE,WAAWA,SAAX,KAAyB,QAAzB,EAAiC;IAC/B,kBAAkB,IAAlB,CAAmBC,SAAnB,GAAuBD;MACrBH,6BAAkBG,IAASlB,KAATkB,CAAelB,SAAfkB,EAA8BA,SAA9BA,CAAlBH;IACD;;WACM,CAACA,4BAAD;EACR,CALD,MAKC,IAAUK,cAAMC,SAAND,KAAwBF,SAAa,OAAb,GAAoB,CAAtD,EAA0D;IACzD,yBAAiBI,QAAjB;GADD,MAEM;WACE;EACR;CAVUL","names":["Theme","id","name","getCharacteristicValue","variant","scopeElement","characteristicName","document","body","querySelector","getComputedStyle","variableValue","style","lightTheme","darkTheme","toolkitThemes","DEFAULT_THEME","getTheme","themeName","has","Array","isArray","flatMap"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/theme/Theme.ts"],"sourcesContent":["export type characteristic =\n  | \"accent\"\n  | \"actionable\"\n  | \"container\"\n  | \"delay\"\n  | \"disabled\"\n  | \"draggable\"\n  | \"dropTarget\"\n  | \"editable\"\n  | \"focused\"\n  | \"measured\"\n  | \"navigable\"\n  | \"overlayable\"\n  | \"ratable\"\n  | \"selectable\"\n  | \"separable\"\n  | \"taggable\"\n  | \"text\"\n  | \"status\"\n  // The next 4 are foundations, should they really be here?\n  | \"icon\"\n  | \"shadow\"\n  | \"size\"\n  | \"spacing\";\nexport class Theme {\n  id: string;\n  name: string;\n  constructor(id: string, name: string) {\n    this.id = id;\n    this.name = name;\n  }\n\n  getCharacteristicValue(\n    characteristicName: characteristic,\n    variant: string,\n    scopeElement?: HTMLElement\n  ): string | null {\n    const cssVariableName = `--uitk-${characteristicName}-${variant}`;\n    const scopeTarget =\n      scopeElement || document.body.querySelector(`.uitk-${this.id}`);\n    if (scopeTarget) {\n      const style = getComputedStyle(scopeTarget);\n      const variableValue = style.getPropertyValue(cssVariableName);\n      if (variableValue) {\n        return variableValue;\n      }\n    }\n    return null;\n  }\n}\n\nconst lightTheme = new Theme(\"uitk-light\", \"light\");\nconst darkTheme = new Theme(\"uitk-dark\", \"dark\");\n\nconst toolkitThemes: Map<string, Theme> = new Map([\n  [\"light\", lightTheme],\n  [\"dark\", darkTheme],\n]);\n\nexport const DEFAULT_THEME = lightTheme;\n\nexport const getTheme = (themeName: string | string[]): Theme[] => {\n  if (typeof themeName === \"string\") {\n    if (!toolkitThemes.has(themeName)) {\n      toolkitThemes.set(themeName, new Theme(themeName, themeName));\n    }\n    return [toolkitThemes.get(themeName) as Theme];\n  } else if (Array.isArray(themeName) && themeName.length > 0) {\n    return themeName.flatMap(getTheme);\n  } else {\n    return [DEFAULT_THEME];\n  }\n};\n"]},"metadata":{},"sourceType":"module"}