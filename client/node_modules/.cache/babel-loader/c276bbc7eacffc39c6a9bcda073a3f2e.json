{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useState, useEffect } from 'react';\nimport cx from 'classnames';\nimport { makePrefixer } from '../utils/makePrefixer.js';\nimport '../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../theme/Theme.js';\nimport './Button.css.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst withBaseName = makePrefixer(\"uitkButton\");\nconst ButtonVariantValues = [\"primary\", \"secondary\", \"cta\"];\nconst Button = /* @__PURE__ */forwardRef(function Button2(_a, ref) {\n  var _b = _a,\n      {\n    children,\n    className,\n    disabled,\n    elementType,\n    focusableWhenDisabled,\n    onKeyUp,\n    onKeyDown,\n    onBlur,\n    onClick,\n    role: roleProp,\n    variant = \"primary\"\n  } = _b,\n      restProps = __objRest(_b, [\"children\", \"className\", \"disabled\", \"elementType\", \"focusableWhenDisabled\", \"onKeyUp\", \"onKeyDown\", \"onBlur\", \"onClick\", \"role\", \"variant\"]);\n\n  const [keyIsDown, setkeyIsDown] = useState(\"\");\n  const [active, setActive] = useState(false);\n  const enter = \"Enter\";\n  const space = \" \";\n  useEffect(() => {\n    const t = setTimeout(() => {\n      if (keyIsDown !== enter && keyIsDown !== space) {\n        setActive(false);\n      }\n    }, 0);\n    return () => {\n      clearTimeout(t);\n    };\n  }, [active, keyIsDown]);\n\n  const handleKeyUp = event => {\n    setkeyIsDown(\"\");\n    setActive(false);\n\n    if (onKeyUp) {\n      onKeyUp == null ? void 0 : onKeyUp(event);\n    }\n  };\n\n  const handleClick = event => {\n    setActive(true);\n\n    if (onClick) {\n      onClick == null ? void 0 : onClick(event);\n    }\n  };\n\n  const handleBlur = event => {\n    setActive(false);\n\n    if (onBlur) {\n      onBlur == null ? void 0 : onBlur(event);\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (!disabled && event.target === event.currentTarget && Component !== \"button\" && Component !== \"a\" && (event.key === enter || event.key === space)) {\n      onClick == null ? void 0 : onClick(event);\n    }\n\n    if (event.key === enter || event.key === space) {\n      setkeyIsDown(event.key);\n      setActive(true);\n    }\n\n    onKeyDown == null ? void 0 : onKeyDown(event);\n  };\n\n  const Component = elementType || \"button\";\n  const role = roleProp !== void 0 ? roleProp : Component === \"button\" || Component === \"a\" ? void 0 : \"button\";\n  return /* @__PURE__ */jsx(Component, __spreadProps(__spreadValues({\n    \"aria-disabled\": disabled,\n    className: cx(withBaseName(), className, withBaseName(variant), {\n      [withBaseName(\"disabled\")]: disabled,\n      [withBaseName(\"active\")]: active\n    }),\n    disabled: disabled && !focusableWhenDisabled,\n    tabIndex: disabled && !focusableWhenDisabled ? -1 : 0,\n    onBlur: handleBlur,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    role\n  }, restProps), {\n    ref,\n    children: /* @__PURE__ */jsx(\"span\", {\n      className: withBaseName(\"label\"),\n      children\n    })\n  }));\n});\nexport { Button, ButtonVariantValues };","map":{"version":3,"mappings":";;;;;;;;AAAA;AAAA,uBAQEA,iBARF;AAWA,IAAOC,iBAAQ,SAAa,0BAA5B;AACA,IAA2BC,mBAAoC,+BAA/D;AAEA,yBAAsB,UAAtB,CAAsBC,cAAtB;AAEA,mBAAqBD,iBAAaE,oBAAlC;;AAEA,IAAOC,6BAA4BC,KAA5B,KAA4BC;EAAAC;EAAAC;EAAAC;EAAAJ;AAAA,qBAAnC;;IAAoCK,cAAS;OAAa,2BAAE,IAAKC,0BAAL,EAAgBP;;EAsCrE,yBAmBL,KAAM,IAAUQ,IAAhB,IAAgBC,mBAA0B,GAA1C,EAA0C;IACpC,gBAAkB,KAAlB,CAAkBC,CAAlB,EAAmBF,IAAnB,GAEAG,eAAQ,IAAQH,IAAR,EAAQE,OAAR,CAARC;EACAC;EAENjB;AACE;;iBAC0J;;aACrC;EACnH;;mBACWkB,QACV,wEACC,CAACL,IAAD,IAAEK;;EAEN,cAAa,IAAb,IAAaJ,mBAAb,WACcD,2BAAI;QAChBM,8DACDC;;SAAkBA;AAAC;;AAOnB;AACD,6BAEF,SAFE,eAIA,KAJA;AAMC;MACDC;MAAA;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;EAAA;MAAAC;;EAEF,kBAAgBC,YAAhB,IAA+DC,YAA/D;QACEC,CAASC,MAATD,EAASA,SAATA,IAAiBD;EACjB;aACQ;EACPnC;UACDsC;MAEF,IAAMC,SAAa,UAAbA,IAA+DC,mBAArE,EAAqE;QACnEJ,SAA8C,OAA9C;;IAIEK,CAPF,EAOEA,CAPF;WASW;kBAIG;;EAEb,CAhBA,EAgBA,SAGCP,SAHD,CAhBA;;EAqBA;gBAEQ;aACT;;IAEF,aAAe;MACsDP;IACrE;EAOA,CAdG;;EAgBCe,oBAAaD,KAAbC,IAAuB;IACvBnB;;IACE;MACAO,OAACa,QAAD,GAACA,KAAa,CAAd,GAAcb,OAAkB,OAAhC;;EAEFN,CALAkB;;QAMAE,UAAUpB,YAAY;IACtBK,UAAM,KAANA;;IACAC;MACAF,iBAAwB,MAAxBA,GAAwBC,aAAxBD;IACAD;EACAI;;EACC,mBAAY;IACbc,iBAAQJ,oCAARI,IAAQC,sBAARD,IAAQC,iBAARD,KAAQJ,0CAARI,GAAQ;MAERf,kCAAK,OAAL;IAAMP;;sBAAmCD,SAAQmB;MAAQP;MAC/CE,SACZ,MADY;IAEQ;;;GANjB;;;;;;;;;;;;;;;;;;;;;;;;CAxDF","names":["useEffect","cx","makePrefixer","hasOwnProperty","propertyIsEnumerable","__defNormalProp","value","key","enumerable","configurable","writable","__spreadValues","__hasOwnProp","prop","__getOwnPropSymbols","b","enter","space","source","exclude","target","_b","children","className","disabled","elementType","focusableWhenDisabled","onKeyUp","onKeyDown","onBlur","onClick","role","variant","restProps","setkeyIsDown","useState","setActive","active","t","handleKeyDown","keyIsDown","event","aria-disabled","withBaseName","tabIndex","ref","Component"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/button/Button.tsx"],"sourcesContent":["import {\n  ComponentPropsWithoutRef,\n  ElementType,\n  FocusEvent,\n  forwardRef,\n  KeyboardEvent,\n  MouseEvent,\n  ReactElement,\n  useEffect,\n  useState,\n} from \"react\";\nimport cx from \"classnames\";\nimport { inferElementType, makePrefixer, polymorphicRef } from \"../utils\";\n\nimport \"./Button.css\";\n\nconst withBaseName = makePrefixer(\"uitkButton\");\n\nexport const ButtonVariantValues = [\"primary\", \"secondary\", \"cta\"] as const;\nexport type ButtonVariant = typeof ButtonVariantValues[number];\n\nexport interface ButtonBaseProps<T extends ElementType> {\n  /**\n   * By default, root element of Button will be a `button` HTMLElement. This behaviour\n   * can be changed by passing a value to elementType. This can be a string\n   * representing an alternative html element  e.g `\"a\"`, `\"div\"`. It can also be a\n   * React component eg RouterLink. If root element is not `button` or `a`, the\n   * aria button role will be assigned to the root element.\n   */\n  elementType?: T;\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the button will be focusable when disabled.\n   */\n  focusableWhenDisabled?: boolean;\n  onBlur?: (evt: FocusEvent<inferElementType<T>>) => void;\n  onClick?: (evt: MouseEvent<inferElementType<T>>) => void;\n  onKeyDown?: (evt: KeyboardEvent<inferElementType<T>>) => void;\n  onKeyUp?: (evt: KeyboardEvent<inferElementType<T>>) => void;\n  /**\n   * The variant to use. Options are 'primary', 'secondary' and 'cta'.\n   * 'primary' is the default value.\n   */\n  variant?: ButtonVariant;\n}\n\nexport type ButtonProps<T extends ElementType = \"button\"> = ButtonBaseProps<T> &\n  Omit<ComponentPropsWithoutRef<T>, keyof ButtonBaseProps<T>>;\n\ntype PolymorphicButton = <T extends ElementType = \"button\">(\n  p: ButtonProps<T> & { ref?: polymorphicRef<T> }\n) => ReactElement<ButtonProps<T>>;\n\nexport const Button = forwardRef(function Button<\n  T extends ElementType = \"button\"\n>(\n  {\n    children,\n    className,\n    disabled,\n    elementType,\n    focusableWhenDisabled,\n    onKeyUp,\n    onKeyDown,\n    onBlur,\n    onClick,\n    role: roleProp,\n    variant = \"primary\",\n    ...restProps\n  }: ButtonProps<T>,\n  ref?: polymorphicRef<T>\n): ReactElement<ButtonProps<T>> {\n  const [keyIsDown, setkeyIsDown] = useState(\"\");\n  const [active, setActive] = useState(false);\n\n  const enter = \"Enter\";\n  const space = \" \";\n\n  useEffect(() => {\n    const t = setTimeout(() => {\n      // This key state check is to stop continual visual state change when using Enter Key, which the browser treats as both key and click events on a Button\n      // This key state check also fixes Firefox Button where Space key is pressed but button fails to be in active state\n      if (keyIsDown !== enter && keyIsDown !== space) {\n        setActive(false);\n      }\n    }, 0);\n\n    return () => {\n      clearTimeout(t);\n    };\n  }, [active, keyIsDown]);\n\n  const handleKeyUp = (event: KeyboardEvent<inferElementType<T>>) => {\n    setkeyIsDown(\"\");\n    setActive(false);\n    if (onKeyUp) {\n      onKeyUp?.(event);\n    }\n  };\n\n  const handleClick = (event: MouseEvent<inferElementType<T>>) => {\n    setActive(true);\n    if (onClick) {\n      onClick?.(event);\n    }\n  };\n\n  const handleBlur = (event: FocusEvent<inferElementType<T>>) => {\n    setActive(false);\n    if (onBlur) {\n      onBlur?.(event);\n    }\n  };\n\n  const handleKeyDown = (event: KeyboardEvent<inferElementType<T>>) => {\n    // for Pill component, which depends on Button\n    if (\n      !disabled &&\n      // Don't act on children component\n      event.target === event.currentTarget &&\n      // `button` and `a` would be handled by default\n      Component !== \"button\" &&\n      Component !== \"a\" &&\n      (event.key === enter || event.key === space)\n    ) {\n      //@ts-ignore\n      onClick?.(event);\n    }\n\n    if (event.key === enter || event.key === space) {\n      setkeyIsDown(event.key);\n      setActive(true);\n    }\n\n    onKeyDown?.(event);\n  };\n\n  const Component: ElementType = elementType || \"button\";\n  // Allow an explicit null value to be passed by user to suppress role\n  const role =\n    roleProp !== undefined\n      ? roleProp\n      : Component === \"button\" || Component === \"a\"\n      ? undefined\n      : \"button\";\n\n  return (\n    <Component\n      aria-disabled={disabled}\n      className={cx(withBaseName(), className, withBaseName(variant), {\n        [withBaseName(\"disabled\")]: disabled,\n        [withBaseName(\"active\")]: active,\n      })}\n      disabled={disabled && !focusableWhenDisabled}\n      tabIndex={disabled && !focusableWhenDisabled ? -1 : 0}\n      onBlur={handleBlur}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      role={role}\n      {...restProps}\n      ref={ref}\n    >\n      <span className={withBaseName(\"label\")}>{children}</span>\n    </Component>\n  );\n}) as PolymorphicButton;\n"]},"metadata":{},"sourceType":"module"}