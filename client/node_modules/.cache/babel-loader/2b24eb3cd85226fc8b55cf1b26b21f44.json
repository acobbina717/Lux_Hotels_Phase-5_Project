{"ast":null,"code":"import { jsxs, Fragment, jsx } from 'react/jsx-runtime';\nimport cx from 'classnames';\nimport { StateIcon } from '../state-icon/StateIcon.js';\nimport { Tooltip } from '../tooltip/Tooltip.js';\nimport '../tooltip/TooltipContext.js';\nimport { useTooltip } from '../tooltip/useTooltip.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst StatusIndicator = props => {\n  const _a = props,\n        {\n    TooltipComponent = Tooltip,\n    hasTooltip = false,\n    TooltipProps,\n    tooltipText,\n    IconProps,\n    className,\n    state = \"info\"\n  } = _a,\n        restProps = __objRest(_a, [\"TooltipComponent\", \"hasTooltip\", \"TooltipProps\", \"tooltipText\", \"IconProps\", \"className\", \"state\"]);\n\n  const {\n    getTriggerProps,\n    getTooltipProps\n  } = useTooltip({\n    placement: \"top\",\n    disabled: !hasTooltip\n  });\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(TooltipComponent, __spreadValues({}, getTooltipProps(__spreadValues({\n      hideIcon: true,\n      state,\n      title: tooltipText\n    }, TooltipProps)))), /* @__PURE__ */jsx(StateIcon, __spreadValues({}, getTriggerProps(__spreadProps(__spreadValues(__spreadValues({\n      state,\n      size: 12\n    }, restProps), IconProps), {\n      className: cx(\"uitkStatusIndicator-stateIcon\", className, IconProps == null ? void 0 : IconProps.className)\n    }))))]\n  });\n};\n\nexport { StatusIndicator };","map":{"version":3,"mappings":";;;;;;AAAA;AACA,IAAOA,UAAQ,0BAAf;AAEA,IAASC,iBAAiB,mCAA1B;AACA,uBAA0C,+BAA1C;AAeA,gBAAaC,kCAAb;AACE,gBACEC,oBAAmBC,oBADrB;;IAWAC,wBAAuBC,GAAvB,EAAuBC,KAAvB,KAAuBD,GAAiB,IAAKE,GAAtB,GAAsBA,SAAW;EAAAC;EAAAC;EAAAC;EAAAJ;AAAA,EAAjC,GAAiCK;;AACtDC,qBAAgB;WACRC,QAAGC,CAAU,cACtB,IAAEC,0BAAF,EAGCX;;2BACE,oCAAiB,GAAjB,EAAiB;IACd,gCACCY,yBAAcC,OAAdD;;EAEAE;AACA,CAXNN;;iBAYK,GAAC;;AACF;EACF;;EACG,iBAAGO,MAAH,kBACCC,CAAKC,iDACLC,qBAAQ,MAARA;;EACA,sBAAYC,mBAAZ,EACA,oCAAY,QAAZ,EAAY;wBACHV,QACP,KAA+BW,gDAIjCC;EACF;;CAbA","names":["cx","StateIcon","StatusIndicator","TooltipComponent","Tooltip","__defNormalProp","key","value","useTooltip","enumerable","configurable","writable","obj","placement","prop","hasTooltip","__hasOwnProp","hideIcon","b","title","getTriggerProps","state","call","size","__getOwnPropSymbols","__propIsEnum","source"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/form-field/StatusIndicator.tsx"],"sourcesContent":["import { IconProps } from \"@jpmorganchase/uitk-icons\";\nimport cx from \"classnames\";\nimport { ElementType } from \"react\";\nimport { StateIcon } from \"../state-icon\";\nimport { Tooltip, TooltipProps, useTooltip } from \"../tooltip\";\n\nexport type StateIndicatorState = \"error\" | \"info\" | \"warning\" | \"success\";\n\n// `statusIndicatorContent` is removed. It's not a very restrictive API only allowing string array.\n// User always have ability to override `tooltipText` for string, or `TooltipProps.render` for complex structure.\nexport interface StatusIndicatorProps extends IconProps {\n  hasTooltip?: boolean;\n  IconProps?: Partial<IconProps>;\n  state?: StateIndicatorState;\n  TooltipComponent?: ElementType<TooltipProps>;\n  TooltipProps?: Partial<TooltipProps>;\n  tooltipText?: string;\n}\n\nexport const StatusIndicator = (props: StatusIndicatorProps) => {\n  const {\n    TooltipComponent = Tooltip,\n    hasTooltip = false,\n    TooltipProps,\n    tooltipText,\n    IconProps,\n    className,\n    state = \"info\",\n    ...restProps\n  } = props;\n\n  const { getTriggerProps, getTooltipProps } = useTooltip({\n    placement: \"top\",\n    disabled: !hasTooltip,\n  });\n\n  return (\n    <>\n      <TooltipComponent\n        {...getTooltipProps({\n          hideIcon: true,\n          state,\n          title: tooltipText,\n          ...TooltipProps,\n        })}\n      />\n      <StateIcon\n        {...getTriggerProps<typeof StateIcon>({\n          state,\n          size: 12,\n          ...restProps,\n          ...IconProps,\n          className: cx(\n            \"uitkStatusIndicator-stateIcon\",\n            className,\n            IconProps?.className\n          ),\n        })}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}