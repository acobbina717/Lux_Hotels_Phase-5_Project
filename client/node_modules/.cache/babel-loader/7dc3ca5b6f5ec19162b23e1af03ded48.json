{"ast":null,"code":"import { jsxs, jsx } from 'react/jsx-runtime';\nimport cx from 'classnames';\nimport { forwardRef, useState, useRef, useImperativeHandle } from 'react';\nimport '../form-field-context/FormFieldContext.js';\nimport { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';\nimport 'react-dom';\nimport '../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../theme/Theme.js';\nimport { makePrefixer } from '../utils/makePrefixer.js';\nimport { useId } from '../utils/useId.js';\nimport '@jpmorganchase/uitk-icons';\nimport '../tooltip/Tooltip.css.js';\nimport '../tooltip/TooltipContext.js';\nimport '../popper/useFloatingUI.js';\nimport '@floating-ui/react-dom-interactions';\nimport '../form-field/FormActivationIndicator.css.js';\nimport '../form-field/FormHelperText.css.js';\nimport { FormLabel } from '../form-field/FormLabel.js';\nimport '../form-field/FormField.css.js';\nimport { FormGroup } from '../form-group/FormGroup.js';\nimport { RadioGroupContext } from './internal/RadioGroupContext.js';\nimport { RadioButton } from './RadioButton.js';\nimport './RadioButtonGroup.css.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst withBaseName = makePrefixer(\"uitkRadioButtonGroup\");\nconst RadioButtonGroup = /* @__PURE__ */forwardRef(function RadioButtonGroup2(props, ref) {\n  const _a = props,\n        {\n    children,\n    className,\n    defaultValue,\n    legend,\n    icon,\n    radios,\n    onChange,\n    value: valueProp,\n    row,\n    name: nameProp\n  } = _a,\n        rest = __objRest(_a, [\"children\", \"className\", \"defaultValue\", \"legend\", \"icon\", \"radios\", \"onChange\", \"value\", \"row\", \"name\"]);\n\n  const {\n    inFormField,\n    a11yProps\n  } = useFormFieldProps({\n    focusVisible: false\n  });\n  const [stateValue, setStateValue] = useState(props.defaultValue);\n\n  const getValue = () => isControlled() ? props.value : stateValue;\n\n  const isControlled = () => props.value !== void 0;\n\n  const handleChange = event => {\n    if (!isControlled()) {\n      setStateValue(event.target.value);\n    }\n\n    if (props.onChange) {\n      props.onChange(event);\n    }\n  };\n\n  const rootRef = useRef(null);\n  useImperativeHandle(void 0, () => ({\n    focus: () => {\n      const current = rootRef.current;\n\n      if (current) {\n        let input = current.querySelector(\"input:not(:disabled):checked\");\n\n        if (!input) {\n          input = current.querySelector(\"input:not(:disabled)\");\n        }\n\n        if (input) {\n          input.focus();\n        }\n      }\n    }\n  }), []);\n  const name = useId(nameProp);\n  return /* @__PURE__ */jsxs(\"fieldset\", __spreadProps(__spreadValues({\n    className: cx(withBaseName(), row ? withBaseName(\"horizontal\") : withBaseName(\"vertical\"), className),\n    \"data-testid\": \"radio-button-group\",\n    ref,\n    role: \"radiogroup\"\n  }, a11yProps), {\n    children: [!inFormField && /* @__PURE__ */jsx(FormLabel, {\n      className: cx(withBaseName(\"legend\")),\n      label: legend\n    }), /* @__PURE__ */jsx(RadioGroupContext.Provider, {\n      value: {\n        name,\n        onChange: handleChange,\n        value: getValue()\n      },\n      children: /* @__PURE__ */jsx(FormGroup, __spreadProps(__spreadValues({\n        role: \"radiogroup\"\n      }, rest), {\n        row,\n        children: radios && radios.map(radio => /* @__PURE__ */jsx(RadioButton, {\n          disabled: radio.disabled,\n          icon,\n          label: radio.label,\n          value: radio.value\n        }, radio.label)) || children\n      }))\n    })]\n  }));\n});\nexport { RadioButtonGroup };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,IAAOA,aAAUC,MAAM,iBAAvB;AACA,IAGEC,iBAEAC,GAAmBF,gCALrB;AASA,IAASG,mBAAiB,+BAA1B;AACA,IAASC,sBAAiBC,SAAjBD,CAAyBE,cAAlC;AACA,IAASC,eAAiBP,qCAA1B;;AACA,mBAAqB,IAAEQ,GAAF,EAAOC,GAAP,EAAOC,KAAP,KAAOD,GAAkB,IAACE,GAAnB,GAAmBC;EAAAC;EAAAC;EAAAC;EAAAL;AAAA,EAAnB,GAAmBC,gBAA/C;;AACA,IAASK,2BAAyB;EACzBC,kBAAW,KAAQC,MAAR,CAAXD,EAGT,gCAEME,eAAeC,YAAYC,IAAZD,EAAfD;;EAkBC,yBAIL,SACUE,IADV,IACUC,mBAEI,GAHd,EAGc;IAWR,iBAAaC,IAAb,CAAaL,CAAb,EAAaG,IAAb,GACJG,eAAmB,kBAAnBA;EACD;EAED;CA9CF;;AAgDqE;;AAEnE,yBAAqBC,OAArB,KAAiCf;EAAoB;;EAErD,SAAkBW,IAAlB,IAAkBK,MAAlB,MACEC,YAAiB,KAAjB,CAAiBD,MAAjB,EAAqBL,IAArB,KAAqBI,2BACnBG,qBAAmB,MAAnBA;;EACD,gDACGC,YAAMC,mBAAU;IAClBD,WAAK,CAACC,OAAND,CAAcR,IAAdQ,IAAsB,CAAtBA,IAAsBE,+BAAtBF,EACDG;EACF;EAED;AAEA9B,CAbA;;AA4BO;AACF;UACD;QAAA;IAAA+B;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;IAAAR;IAAApB;IAAA6B;IAAAC;EAAA;QAAAC;;QACA;IACFC,WADE;IACFC;EADE,IACFvC;IAEFoB,YAAahB;EAFX;EAME0B,mBAAqBN,aAArBM,IAAqBU,QAEnBL,MAAMpB,aAANoB,CAFFL;;EAKAW,uBAAgCC,yCAAhCD;;EACAE,kBAAQ,+BAARA;;EACAC,kBAAiB;IAChB,iBAAY,EAAZ,EAAY;;;;IAITd;MACAe,eAAKC,KAALD;;GANJD;;EAWEtC,sBAAO,MAAPA;qBAAa;IAAEoB;sBAA6BqB;;MAAc;QAE1D;;QAAWH;UAAmBI,eAAO,cAAP,CAAO,sBAAP;QAASb;;;;QAK/BF;;;EAPK;EAYR,mBAACgB,QAAD;EAEO;IACenB,qGADf;uCAAA;OAAA;IAIjBc;EAJiB;;;;;;;;;;;;;;;;;;;;;;GAAA;CAzCb","names":["classnames","Object","forwardRef","useImperativeHandle","FormLabel","useFormFieldProps","prototype","hasOwnProperty","FormGroup","useId","key","value","obj","__defProp","enumerable","configurable","writable","RadioGroupContext","RadioButton","b","withBaseName","makePrefixer","prop","__getOwnPropSymbols","call","focusVisible","exclude","source","__hasOwnProp","setStateValue","props","onChange","__propIsEnum","target","children","className","defaultValue","legend","icon","radios","row","name","rest","inFormField","a11yProps","useState","data-testid","isControlled","ref","role","label","event","rootRef","input","nameProp"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/radio-button/RadioButtonGroup.tsx"],"sourcesContent":["import classnames from \"classnames\";\nimport {\n  ChangeEventHandler,\n  FC,\n  forwardRef,\n  HTMLAttributes,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\nimport { FormLabel } from \"../form-field\";\nimport { useFormFieldProps } from \"../form-field-context\";\nimport { FormGroup } from \"../form-group\";\nimport { makePrefixer, useId } from \"../utils\";\nimport { RadioGroupContext } from \"./internal/RadioGroupContext\";\nimport { RadioButton } from \"./RadioButton\";\nimport { RadioIconProps } from \"./RadioIcon\";\n\nimport \"./RadioButtonGroup.css\";\n\nconst withBaseName = makePrefixer(\"uitkRadioButtonGroup\");\n\nexport interface RadioButtonGroupProps extends HTMLAttributes<HTMLDivElement> {\n  className?: string;\n  defaultValue?: string;\n  icon?: FC<RadioIconProps>;\n  legend?: string;\n  name?: string;\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n  radios?: {\n    disabled?: boolean;\n    label?: string;\n    value?: string;\n  }[];\n  row?: boolean;\n  value?: string;\n}\n\nexport const RadioButtonGroup = forwardRef<\n  HTMLFieldSetElement,\n  RadioButtonGroupProps\n>(function RadioButtonGroup(props, ref) {\n  const {\n    children,\n    className,\n    defaultValue,\n    legend,\n    icon,\n    radios,\n    onChange,\n    value: valueProp,\n    row,\n    name: nameProp,\n    ...rest\n  } = props;\n\n  const { inFormField, a11yProps } = useFormFieldProps({\n    focusVisible: false,\n  });\n\n  const [stateValue, setStateValue] = useState(props.defaultValue);\n\n  const getValue = () => (isControlled() ? props.value : stateValue);\n\n  const isControlled = () => props.value !== undefined;\n\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n    if (!isControlled()) {\n      setStateValue(event.target.value);\n    }\n    if (props.onChange) {\n      props.onChange(event);\n    }\n  };\n\n  const rootRef = useRef<HTMLFieldSetElement>(null);\n\n  useImperativeHandle(\n    undefined,\n    () => ({\n      focus: () => {\n        const current = rootRef.current;\n        if (current) {\n          let input: HTMLInputElement | null = current.querySelector(\n            \"input:not(:disabled):checked\"\n          );\n          if (!input) {\n            input = current.querySelector(\"input:not(:disabled)\");\n          }\n          if (input) {\n            input.focus();\n          }\n        }\n      },\n    }),\n    []\n  );\n\n  const name = useId(nameProp);\n\n  return (\n    <fieldset\n      className={classnames(\n        withBaseName(),\n        row ? withBaseName(\"horizontal\") : withBaseName(\"vertical\"),\n        className\n      )}\n      data-testid=\"radio-button-group\"\n      ref={ref}\n      role=\"radiogroup\"\n      {...a11yProps}\n    >\n      {!inFormField && (\n        <FormLabel\n          className={classnames(withBaseName(\"legend\"))}\n          label={legend}\n        />\n      )}\n\n      <RadioGroupContext.Provider\n        value={{ name, onChange: handleChange, value: getValue() }}\n      >\n        <FormGroup role=\"radiogroup\" {...rest} row={row}>\n          {(radios &&\n            radios.map((radio) => (\n              <RadioButton\n                disabled={radio.disabled}\n                icon={icon}\n                key={radio.label}\n                label={radio.label}\n                value={radio.value}\n              />\n            ))) ||\n            children}\n        </FormGroup>\n      </RadioGroupContext.Provider>\n    </fieldset>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}