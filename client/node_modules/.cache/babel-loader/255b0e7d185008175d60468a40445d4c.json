{"ast":null,"code":"import { jsxs, jsx } from 'react/jsx-runtime';\nimport cx from 'classnames';\nimport { forwardRef, useRef, useState, useCallback } from 'react';\nimport { makePrefixer } from '../utils/makePrefixer.js';\nimport { useControlled } from '../utils/useControlled.js';\nimport '../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../theme/Theme.js';\nimport { CheckboxIcon } from './CheckboxIcon.js';\nimport './CheckboxBase.css.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst withBaseName = makePrefixer(\"uitkCheckboxBase\");\nconst CheckboxBase = /* @__PURE__ */forwardRef(function CheckboxBase2(_a, ref) {\n  var _b = _a,\n      {\n    checked: checkedProp,\n    className: classNameProp,\n    defaultChecked,\n    disabled,\n    indeterminate,\n    inputProps,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    value: value1\n  } = _b,\n      rest = __objRest(_b, [\"checked\", \"className\", \"defaultChecked\", \"disabled\", \"indeterminate\", \"inputProps\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"value\"]);\n\n  const inputRef = useRef(null);\n  const [checked, setChecked] = useControlled({\n    controlled: checkedProp,\n    default: Boolean(defaultChecked),\n    name: \"Checkbox\",\n    state: \"checked\"\n  });\n  const [focusVisible, setFocusVisible] = useState(false);\n\n  const handleChange = event => {\n    if (event.nativeEvent.defaultPrevented) {\n      return;\n    }\n\n    const value = event.target.checked;\n    setChecked(value);\n    onChange == null ? void 0 : onChange(event, value);\n  };\n\n  const handleFocus = useCallback(event => {\n    var _a2;\n\n    if (!inputRef.current) {\n      inputRef.current = event.currentTarget;\n    }\n\n    if ((_a2 = inputRef.current) == null ? void 0 : _a2.matches(\":focus-visible\")) {\n      setFocusVisible(true);\n    }\n\n    onFocus && onFocus(event);\n  }, [onFocus]);\n  const handleBlur = useCallback(event => {\n    setFocusVisible(false);\n    onBlur && onBlur(event);\n  }, [onBlur]);\n  const className = cx(withBaseName(), classNameProp, {\n    uitkFocusVisible: focusVisible\n  });\n  return /* @__PURE__ */jsxs(\"span\", __spreadProps(__spreadValues({}, rest), {\n    className,\n    ref,\n    children: [/* @__PURE__ */jsx(\"input\", __spreadProps(__spreadValues({\n      \"aria-checked\": indeterminate ? \"mixed\" : checked,\n      name,\n      value: value1\n    }, inputProps), {\n      checked: checkedProp,\n      className: withBaseName(\"input\"),\n      \"data-indeterminate\": indeterminate,\n      defaultChecked,\n      disabled,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      onFocus: handleFocus,\n      ref: inputRef,\n      type: \"checkbox\"\n    })), /* @__PURE__ */jsx(CheckboxIcon, {\n      checked,\n      disabled,\n      indeterminate\n    })]\n  }));\n});\nexport { CheckboxBase };","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AAAA,IAAOA,aAAUC,MAAM,iBAAvB;AACA,IAIEC,iBAGAC,GAAWF,gCAPb;AAWA,uBAAuBG,GAAaH,4BAApC;AACA,IAASI,qBAAoB,UAApBA,CAAoBC,cAA7B;AAEA,oCAA4BC,oBAA5B;;AAEA,mBAAqBC,cAAYC,KAAZD,KAAaE,aAAoBC;EAAAC;EAAAC;EAAAC;EAAAL;AAAA,EAApB,GAAoBM,gBAAtD;;AAmBA,IAAOC,cAAkB;OAkBqC,2BAC1D,gBAAiBC,KAAjB,CAAiBA,CAAjB,EAAiDC,IAAjD,GAEAC,yBAA2BC,OAA3B;;EACEC,yBACAC,iBAASC,mBAAuB,GAAhCD,EAAgC;IAChCE,gBAAgB,KAAhBA,CAAgBJ,CAAhBI,EAAgBN,IAAhBM,GACAC,eAAgB,kBAAhBA;EACD;SAEKC;AAEN,CA9BJ;;iBA+BqE;;AAC/D,aAAS,YAAYC,OAAZ,KAAY;YACnB,GAAO;;EACR,yBAED,gBAAcC,KAAd,CAAcA,MAAd,EAA0BV,IAA1B,KAAmCS,yBAAnC,QACU,SAAME,MAAE;;EAClBC,cAAQ,IAARA,IAAgBC,mBAAhBD,OACA;IAEF,IAAME,gBAAc7B,IAAd6B,IAAc7B,CAAd6B,IAAyBC,YACY,KADZ,CACYJ,MADZ,EACYX,IADZ,CAA/B,EAEIgB,MAAwD,MAAxD,GAAwDL,YAAxD;EACA;EACEM;AACD,CAdH;;MAwBAC;AAAQ;EAAC,IACVC,EAAC,KADS;EAAA,IACT;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;IAAAC;IAAAnB;IAAAoB;IAAAd;IAAAe;IAAApC;EAAA,MADS;EAAA,IACTqC,6JADS;;EAGX,uBAAmB3C,MAAnB;QAEI4C,CAAeT,OAAfS,EAAeC,UAAfD,IAAuB3C;IACvBwC,UAAM,EAAIA,WADa;WAGzB,yBAHyB;QAGxBA,EAAM,UAHkB;IAGjBnB,KACR;EAJyB;EAOzBwB,wCAA8BC,eAA9BD;;EACD,MAAEE;IACH,sBACEC,gBADF,EACO;MAAE;IAASb;;IAAsBc,WAAQ,uBAARA;;IACpCvB,4BAAMA,sBAAN;EACEwB,CAJL;;EAKK9B,oBAAMA,WAAI;IACVf;;IACC,uBAAa;MACd6B,mBAASiB,KAAW,cAApBjB;IACAC;;IACAiB,gCAAkB,IAAlBA,GAAiC,MAAjCA,GAAiCC,6BAAjCD,EAAiC;MACjChB;IACAC;;IACAG,kBAAM,OAANA;EACAd,CATU,EASVA,CACAe,OADAf,CATU,CAAVN;EAYAkC,8BAAe;IACfX;IACFH;EACEN,CAHe,EAGfA,CACAG,MADAH,CAHe,CAAfoB;EAMA;;EAAA;EAIT,sBAACC;aAAA;OAAA;;;;;;;;;;;;;;;;;;;;;EAAA,GAAD;CAxCa","names":["classnames","Object","forwardRef","useCallback","useControlled","CheckboxIcon","hasOwnProperty","propertyIsEnumerable","makePrefixer","value","key","__defProp","enumerable","configurable","writable","obj","__spreadValues","useRef","prop","__defNormalProp","b","controlled","default","Boolean","name","state","a","exclude","event","source","onChange","__getOwnPropSymbols","handleFocus","__propIsEnum","target","inputRef","withBaseName","_b","checked","className","defaultChecked","disabled","indeterminate","inputProps","onBlur","onFocus","rest","setFocusVisible","setChecked","uitkFocusVisible","useState","handleChange","defaultPrevented","ref","aria-checked","checkedProp","data-indeterminate","_a2","type","_jsxs"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/checkbox/CheckboxBase.tsx"],"sourcesContent":["import classnames from \"classnames\";\nimport {\n  ChangeEvent,\n  FocusEvent,\n  FocusEventHandler,\n  forwardRef,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\";\nimport { makePrefixer, useControlled } from \"../utils\";\nimport { CheckboxIcon } from \"./CheckboxIcon\";\n\nimport \"./CheckboxBase.css\";\n\nconst withBaseName = makePrefixer(\"uitkCheckboxBase\");\n\nexport interface CheckboxBaseProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, \"onChange\"> {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  disabled?: boolean;\n  indeterminate?: boolean;\n  inputProps?: Partial<InputHTMLAttributes<HTMLInputElement>>;\n  name?: string;\n  onBlur?: FocusEventHandler<HTMLInputElement>;\n  /**\n   * Callback when checked state is changed\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void;\n  onFocus?: FocusEventHandler<HTMLInputElement>;\n  value?: string;\n}\n\nexport const CheckboxBase = forwardRef<HTMLDivElement, CheckboxBaseProps>(\n  function CheckboxBase(\n    {\n      checked: checkedProp,\n      className: classNameProp,\n      defaultChecked,\n      disabled,\n      indeterminate,\n      inputProps,\n      name,\n      onBlur,\n      onChange,\n      onFocus,\n      value,\n      ...rest\n    },\n    ref\n  ) {\n    // null is needed here so we can modify the ref on line 70\n    const inputRef = useRef<HTMLInputElement | null>(null);\n\n    const [checked, setChecked] = useControlled({\n      controlled: checkedProp,\n      default: Boolean(defaultChecked),\n      name: \"Checkbox\",\n      state: \"checked\",\n    });\n\n    const [focusVisible, setFocusVisible] = useState(false);\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n      // Workaround for https://github.com/facebook/react/issues/9023\n      if (event.nativeEvent.defaultPrevented) {\n        return;\n      }\n\n      const value = event.target.checked;\n      setChecked(value);\n      onChange?.(event, value);\n    };\n\n    const handleFocus = useCallback(\n      (event: FocusEvent<HTMLInputElement>) => {\n        // Fix for https://github.com/facebook/react/issues/7769\n        if (!inputRef.current) {\n          inputRef.current = event.currentTarget;\n        }\n\n        // TODO :focus-visible not yet supported on Safari, so we'll need to use the\n        // useIsFocusVisible polyfill\n        if (inputRef.current?.matches(\":focus-visible\")) {\n          setFocusVisible(true);\n        }\n\n        onFocus && onFocus(event);\n      },\n      [onFocus]\n    );\n\n    const handleBlur = useCallback(\n      (event: FocusEvent<HTMLInputElement>) => {\n        setFocusVisible(false);\n        onBlur && onBlur(event);\n      },\n      [onBlur]\n    );\n\n    const className = classnames(withBaseName(), classNameProp, {\n      uitkFocusVisible: focusVisible,\n    });\n    return (\n      <span {...rest} className={className} ref={ref}>\n        <input\n          aria-checked={indeterminate ? \"mixed\" : checked}\n          name={name}\n          value={value}\n          {...inputProps}\n          checked={checkedProp}\n          className={withBaseName(\"input\")}\n          data-indeterminate={indeterminate}\n          defaultChecked={defaultChecked}\n          disabled={disabled}\n          onBlur={handleBlur}\n          onChange={handleChange}\n          onFocus={handleFocus}\n          ref={inputRef}\n          type=\"checkbox\"\n        />\n        <CheckboxIcon\n          checked={checked}\n          disabled={disabled}\n          indeterminate={indeterminate}\n        />\n      </span>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}