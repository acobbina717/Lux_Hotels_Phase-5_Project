{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport cx from 'classnames';\nimport { makePrefixer } from '../utils/makePrefixer.js';\nimport '../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../theme/Theme.js';\nimport './Card.css.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst withBaseName = makePrefixer(\"uitkCard\");\nconst Card = /* @__PURE__ */forwardRef(function Card2(props, ref) {\n  const _a = props,\n        {\n    className,\n    disabled,\n    interactable,\n    children\n  } = _a,\n        rest = __objRest(_a, [\"className\", \"disabled\", \"interactable\", \"children\"]);\n\n  return /* @__PURE__ */jsx(\"div\", __spreadProps(__spreadValues({\n    className: cx(withBaseName(), {\n      [withBaseName(\"disabled\")]: disabled,\n      [withBaseName(\"interactable\")]: interactable\n    }, className),\n    ref\n  }, rest), {\n    children: /* @__PURE__ */jsx(\"div\", {\n      className: withBaseName(\"content\"),\n      children\n    })\n  }));\n});\nexport { Card };","map":{"version":3,"mappings":";;;;;;;;AAAA;AAAA,IAAmCA,mBAAkB,iBAArD;AACA,IAAOC,iBAAQ,SAAa,0BAA5B;AACA,IAASC,mBAAoB,+BAA7B;AACA,mBAAmBC,MAAC,UAAD,CAACC,cAApB;AAEA,mBAAqBF,iBAAaG,oBAAlC;;AAcA;EAAAC;EAAAC;EAAAC;EAAAC;AAAA;;;kCAIA,IAAOC,YAAU,KAAV,CAAUC,CAAV,EAAUC,IAAV,CAAP,EAIEC,eAAiB,IAAUD,IAAV,EAAUD,OAAV,CAAjB;;EAEA,yBAEIG,iBAAaC,mBAEX,GAFFD,EAEE;IACE,sBAAcH,CAAd,EAAcC,IAAd,GACAC,mBAAcD,IAAd,EAAcD,OAAd;EACD;EAGHK;AACC;;AAED,wCAAI,yBAAJ;;AAAKF,yBAAWG,OAAXH,KAAwB;;;EAA4B,6BAE3DJ,8DACDQ;;;;;;CAHQJ","names":["forwardRef","cx","makePrefixer","Object","hasOwnProperty","propertyIsEnumerable","enumerable","configurable","writable","value","__hasOwnProp","b","prop","__defNormalProp","className","__getOwnPropSymbols","ref","withBaseName","target"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/card/Card.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef, forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport { makePrefixer } from \"../utils\";\nimport \"./Card.css\";\n\nconst withBaseName = makePrefixer(\"uitkCard\");\n\nexport interface CardProps extends ComponentPropsWithoutRef<\"div\"> {\n  /**\n   * If `true`, the card will be disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, interactive styles will be applied to `Card`. These styles give prominence to certain content\n   * on the page.\n   */\n  interactable?: boolean;\n}\n\n/**\n * Card component is a sheet if material that serves as an entry point to more detailed information.\n * Cards display content composed of different elements whose size or supported actions vary.\n */\nexport const Card = forwardRef<HTMLDivElement, CardProps>(function Card(\n  props,\n  ref\n) {\n  const { className, disabled, interactable, children, ...rest } = props;\n\n  return (\n    <div\n      className={cx(\n        withBaseName(),\n        {\n          [withBaseName(\"disabled\")]: disabled,\n          [withBaseName(\"interactable\")]: interactable,\n        },\n        className\n      )}\n      ref={ref}\n      {...rest}\n    >\n      <div className={withBaseName(\"content\")}>{children}</div>\n    </div>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}