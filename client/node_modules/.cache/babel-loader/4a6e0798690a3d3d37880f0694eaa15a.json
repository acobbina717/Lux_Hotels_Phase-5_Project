{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { ClosablePill } from './ClosablePill.js';\nimport { PillBase } from './internal/PillBase.js';\nimport { SelectablePill } from './SelectablePill.js';\nimport './Pill.css.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst getVariant = (deletable, variantProp) => {\n  if (variantProp) {\n    return variantProp;\n  } else {\n    return deletable !== void 0 ? \"closable\" : \"basic\";\n  }\n};\n\nconst Pill = /* @__PURE__ */forwardRef(function Pill2(_a, ref) {\n  var _b = _a,\n      {\n    variant: variantProp\n  } = _b,\n      restProps = __objRest(_b, [\"variant\"]);\n\n  const variant = getVariant(restProps.deletable, variantProp);\n\n  if (variant === \"selectable\") {\n    return /* @__PURE__ */jsx(SelectablePill, __spreadProps(__spreadValues({}, restProps), {\n      ref\n    }));\n  } else if (variant === \"closable\") {\n    return /* @__PURE__ */jsx(ClosablePill, __spreadProps(__spreadValues({}, restProps), {\n      ref\n    }));\n  } else {\n    return /* @__PURE__ */jsx(PillBase, __spreadProps(__spreadValues({\n      clickable: true\n    }, restProps), {\n      ref\n    }));\n  }\n});\nexport { Pill };","map":{"version":3,"mappings":";;;;;;AAAA;AAAA,IAAuBA,mBAAgC,iBAAvD;AAEA,IAASC,iBAAY,GAA2BC,gCAAhD;AACA,IAASC,mBAA+B,+BAAxC;AACA,IAASC,qBAA2C,UAA3CA,CAA2CC,cAApD;AAEA,mBAAmBH,MAAC,UAAD,CAACI,oBAApB;;AAkBA,mBAAmB,GAAoB,WAAEC,KAAF,KAAgCC;EAAAC;EAAAC;EAAAC;EAAAC;AAAA,qBAAvE;;AACE,qBAAiB;EACf,iBAAOL,OAAW,GAAC,EAAZA,CAAP,MACKM,4BACLC,mBAAqBC,IAArB,EAAqBA,OAArB;;EACD,yBACD;IAEF,gBAAiB,KAAjB,CAAiBC,CAAjB,EAAiBC,IAAjB,GAIQC,eAAUC,UAAWC,OAAXD,CAAVD;EACFA;EACF;AAAwB,CAb1B;;AAaiEG,iBAAKA,GAAG,6CAARA;;aAAa;EAC7E,UAAUH,KAAV;;EACC,yBAAsB,gBAAY,KAAZ,CAAYI,MAAZ,EAAYL,IAAZ,KAAYM,yBAAZ,EAAcF,eAAQC,YAARD;;YAAa,sCAC5C;IACL,4BAAQlB,CAAR,IAAgBqB,+BAAhB,QAA0B;EAAE;EAAcH","names":["forwardRef","ClosablePill","Object","PillBase","SelectablePill","hasOwnProperty","propertyIsEnumerable","variantProp","key","enumerable","configurable","writable","value","__hasOwnProp","__defNormalProp","undefined","b","prop","variant","getVariant","restProps","ref","source","exclude","__propIsEnum"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/pill/Pill.tsx"],"sourcesContent":["import { ForwardedRef, forwardRef, ReactElement } from \"react\";\n\nimport { ClosablePill, ClosablePillProps } from \"./ClosablePill\";\nimport { PillBase, PillBaseProps } from \"./internal/PillBase\";\nimport { SelectablePill, SelectablePillProps } from \"./SelectablePill\";\n\nimport \"./Pill.css\";\n\nexport type PillVariant = \"basic\" | \"closable\" | \"selectable\";\n\nexport interface PillVariantProps<T extends PillVariant = \"basic\"> {\n  /**\n   * Determines the variant of pill\n   */\n  variant?: T;\n}\n\n// Generic checks makes sure that incompatiable props like `onChange` can be inferred correctly when using different variants\nexport type PillProps<T extends PillVariant = \"basic\"> = T extends \"closable\"\n  ? ClosablePillProps & PillVariantProps<T>\n  : T extends \"basic\"\n  ? PillBaseProps & PillVariantProps<T>\n  : SelectablePillProps & PillVariantProps<T>;\n\nconst getVariant = (deletable?: boolean, variantProp?: PillVariant) => {\n  if (variantProp) {\n    return variantProp;\n  } else {\n    return deletable !== undefined ? \"closable\" : \"basic\";\n  }\n};\n\nexport const Pill = forwardRef(function Pill(\n  { variant: variantProp, ...restProps }: PillProps,\n  ref: ForwardedRef<HTMLDivElement>\n) {\n  const variant = getVariant(restProps.deletable, variantProp);\n  if (variant === \"selectable\") {\n    return <SelectablePill {...(restProps as SelectablePillProps)} ref={ref} />;\n  } else if (variant === \"closable\") {\n    return <ClosablePill {...restProps} ref={ref} />;\n  } else {\n    return <PillBase clickable {...restProps} ref={ref} />;\n  }\n}) as <T extends PillVariant = \"basic\">(\n  p: PillProps<T> & { ref?: ForwardedRef<HTMLDivElement> }\n) => ReactElement<PillProps<T>>;\n"]},"metadata":{},"sourceType":"module"}