{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport cx from 'classnames';\nimport { FlexItem } from '../FlexItem/FlexItem.js';\nimport { makePrefixer } from '../../utils/makePrefixer.js';\nimport '../../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../../theme/Theme.js';\nimport './ParentChildItem.css.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst withBaseName = makePrefixer(\"uitkParentChildItem\");\nconst ParentChildItem = /* @__PURE__ */forwardRef(function ParentChildItem2(_a, ref) {\n  var _b = _a,\n      {\n    disableAnimations = false,\n    direction,\n    isStacked,\n    children,\n    className\n  } = _b,\n      rest = __objRest(_b, [\"disableAnimations\", \"direction\", \"isStacked\", \"children\", \"className\"]);\n\n  return /* @__PURE__ */jsx(FlexItem, __spreadProps(__spreadValues({\n    className: cx(className, withBaseName(), {\n      [withBaseName(`slide-${direction}`)]: !disableAnimations,\n      \"uitkFlexItem-stacked\": isStacked\n    }),\n    ref\n  }, rest), {\n    children\n  }));\n});\nexport { ParentChildItem };","map":{"version":3,"mappings":";;;;;;;;;AAAA;AAAA,IAASA,mBAAkB,iBAA3B;AACA,IAAOC,iBAAQ,SAAa,0BAA5B;AACA,IAASC,mBAA+B,+BAAxC;AAEA,IAASC,qBAAoB,UAApBA,CAAoBC,cAA7B;AACA,oCAA+BC,oBAA/B;;AAmBA,mBAAqBF,cAAYG,KAAZH,KAAaI,aAAsBC,SAAC;EAAAC;EAAAC;EAAAC;EAAAL;AAAA,EAAvB,GAAuBM,gBAAzD;;AACA,kBAAaC,aAAkBb;EAY3B,uBACEc,MADF,GAEIC,gBAAa,KAAbA,CAAaD,CAAbC,EAAaC,IAAbD,GACEE,eAAa,UAAEH,EAAME,IAAN,CAAF,CAAb;;EACA,8BACD,IAACA;IACFE,gBAAQ,KAARA,CAAQJ,CAARI,EAAQF,IAARE,GACCD,eAAO,kBAAP;;SAIHE;AACH,CAxBH","names":["forwardRef","cx","FlexItem","makePrefixer","hasOwnProperty","propertyIsEnumerable","value","key","__defProp","enumerable","configurable","writable","obj","ParentChildItem","b","className","prop","__defNormalProp","ref","a"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/layout/src/layout/ParentChildItem/ParentChildItem.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport { FlexItem, FlexItemProps } from \"../FlexItem\";\n\nimport { makePrefixer } from \"../../utils\";\nimport \"./ParentChildItem.css\";\n\nexport type SlideDirection = \"top\" | \"bottom\" | \"left\" | \"right\";\n\nexport interface ParentChildItemProps extends FlexItemProps {\n  /**\n   * Disable all animations.\n   */\n  disableAnimations?: boolean;\n  /**\n   * Direction for slide animations.\n   */\n  direction?: SlideDirection;\n  /**\n   * Determines whether the component is stacked\n   */\n  isStacked?: boolean;\n}\n\nconst withBaseName = makePrefixer(\"uitkParentChildItem\");\nexport const ParentChildItem = forwardRef<HTMLDivElement, ParentChildItemProps>(\n  function ParentChildItem(\n    {\n      disableAnimations = false,\n      direction,\n      isStacked,\n      children,\n      className,\n      ...rest\n    },\n    ref\n  ) {\n    return (\n      <FlexItem\n        className={cx(className, withBaseName(), {\n          [withBaseName(`slide-${direction}`)]: !disableAnimations,\n          \"uitkFlexItem-stacked\": isStacked,\n        })}\n        ref={ref}\n        {...rest}\n      >\n        {children}\n      </FlexItem>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}