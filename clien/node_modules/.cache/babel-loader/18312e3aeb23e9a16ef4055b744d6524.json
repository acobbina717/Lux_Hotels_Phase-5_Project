{"ast":null,"code":"import { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport cx from 'classnames';\nimport { forwardRef, useCallback } from 'react';\nimport { Portal } from '../portal/Portal.js';\nimport { makePrefixer } from '../utils/makePrefixer.js';\nimport '../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../theme/Theme.js';\nimport { useWindow } from '../window/WindowContext.js';\nimport { getIconForState } from './getIconForState.js';\nimport './Tooltip.css.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst withBaseName = makePrefixer(\"uitkTooltip\");\nconst defaultIconProps = {\n  size: 12,\n  className: withBaseName(\"icon\")\n};\nconst Tooltip = /* @__PURE__ */forwardRef(function Tooltip2(_a, ref) {\n  var _b = _a,\n      {\n    arrowProps,\n    children,\n    className: classNameProp,\n    container,\n    disablePortal,\n    hideArrow,\n    hideIcon,\n    open,\n    render,\n    state = \"info\",\n    title\n  } = _b,\n      rest = __objRest(_b, [\"arrowProps\", \"children\", \"className\", \"container\", \"disablePortal\", \"hideArrow\", \"hideIcon\", \"open\", \"render\", \"state\", \"title\"]);\n\n  const getIcon = useCallback(iconProps => {\n    if (hideIcon) {\n      return null;\n    }\n\n    const StateIcon = getIconForState(state);\n    return StateIcon ? /* @__PURE__ */jsx(StateIcon, __spreadValues(__spreadValues({}, iconProps), defaultIconProps)) : null;\n  }, [state, hideIcon]);\n  const Window = useWindow();\n\n  if (!open) {\n    return null;\n  }\n\n  return /* @__PURE__ */jsx(Portal, {\n    disablePortal,\n    container,\n    children: /* @__PURE__ */jsxs(Window, __spreadProps(__spreadValues({\n      className: cx(withBaseName(), withBaseName(state)),\n      ref\n    }, rest), {\n      children: [/* @__PURE__ */jsx(\"div\", {\n        className: withBaseName(\"content\"),\n        children: render ? render({\n          Icon: passedProps => getIcon(passedProps),\n          getIconProps: () => defaultIconProps\n        }) : /* @__PURE__ */jsxs(Fragment, {\n          children: [getIcon({}), /* @__PURE__ */jsx(\"span\", {\n            className: withBaseName(\"body\"),\n            children: title\n          })]\n        })\n      }), !hideArrow && /* @__PURE__ */jsx(\"div\", __spreadValues({\n        className: withBaseName(\"arrow\")\n      }, arrowProps))]\n    }))\n  });\n});\nexport { Tooltip };","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA,IAAOA,UAAQ,0BAAf;AACA,qBAKEC,GAAWC,gCALb;AAOA,IAASC,mBAA2B,+BAApC;AACA,IAASC,qBAAoB,UAApBA,CAAoBC,cAA7B;AACA,IAASC,eAAiBJ,qCAA1B;;AACA,IAASK,wBAAuBC,GAAvBD,EAAuBE,KAAvBF,KAAuBC,aAAoBE;EAAAC;EAAAC;EAAAC;EAAAJ;AAAA,EAApB,GAAoBK,gBAApD;;AAEA,sBAAsBC,CAAtB,EAAuBC,CAAvB,KAAuB;EAMvB,iBAAqBZ,aAArB,EACA,sBAAyBY,CAAzB,EAAyBC,IAAzB,GAA2BC,eAAQ,kBAARA;;EAAUC,yBAAkC;IAuChE,gBAAgBC,KAAhB,CAAgBA,CAAhB,EAAgBA,IAAhB,GAkBHC,eAAgBpB,UACbqB,OADarB,CAAhB;EAEI;EACE;AACD,CApET;;AAqEQ,wBAAkBM,CAAlB,KAAkBA,WAAeQ,CAAfR,EAAgBgB,iBAAO,GAAvBhB,CAAlB;;aACOiB,YACLC,OADKD,KACL;EAAY,aAAGF,EAAH;;EAAe,iBAAmBI,MAAnB,EAAuB,gBAC3C,KAD2C,CAC3CA,MAD2C,EAC3CT,IAD2C,KAC3CQ,yBAD2C,EAGtDE;;YAAM,sCAAU;IACjB,IAACF,4DAAD,EAEDE,MAAY,MAAZ,GAAwBD,OAAET,IAAF,CAAxB;EAEI;EACF;AACD;;AASK;AAAKE;UAAAA;EAGCS;AAHDT;yCAIqC;EACrC;EAAA;IAAAU;IAEDC,QAFC;IAEDX,wBAFC;IAEDY,SAFC;IAEDC,aAFC;IAEDC,SAFC;IAEDC,QAFC;IAEDC,IAFC;IAEDC,MAFC;IAEDb,cAFC;IAEDc;EAFC,IAEDC,EAFC;EAAA,IAEDC,wJAFC;;;;MAIC;IAAMpB;;;IAA+C;aAGrDe;EAECf;;EAAmC;;;;EAEnC;iBAAA;IAIfY,SAJe;;;;;;;;;;;;;;;;;;;;EAAA;CAZmC","names":["cn","useCallback","Object","Portal","makePrefixer","hasOwnProperty","useWindow","getIconForState","key","value","__defProp","enumerable","configurable","writable","obj","a","b","prop","size","className","forwardRef","__defNormalProp","iconProps","state","StateIcon","exclude","source","target","Icon","arrowProps","children","container","disablePortal","hideArrow","hideIcon","open","render","title","_b","rest"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/tooltip/Tooltip.tsx"],"sourcesContent":["import { IconProps } from \"@jpmorganchase/uitk-icons\";\nimport cn from \"classnames\";\nimport {\n  ComponentProps,\n  forwardRef,\n  HTMLAttributes,\n  ReactNode,\n  useCallback,\n} from \"react\";\nimport { Portal, PortalProps } from \"../portal\";\nimport { makePrefixer } from \"../utils\";\nimport { useWindow } from \"../window\";\nimport { getIconForState } from \"./getIconForState\";\n\nimport \"./Tooltip.css\";\n\n// Keep in order of preference. First items are used as default\n\nexport type TooltipState = \"error\" | \"info\" | \"success\" | \"warning\";\n\nconst withBaseName = makePrefixer(\"uitkTooltip\");\nconst defaultIconProps = { size: 12, className: withBaseName(\"icon\") };\n\n// TODO: Fix types\nexport interface TooltipRenderProp {\n  Icon: any; // typeof Icon;\n  getIconProps: any; // StateAndPropGetterFunction<IconProps>;\n}\n\nexport interface TooltipProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, \"title\" | \"children\">,\n    Pick<PortalProps, \"disablePortal\" | \"container\"> {\n  arrowProps?: ComponentProps<\"div\">;\n  /**\n   * Removes the tooltip arrow.\n   */\n  hideArrow?: boolean;\n  /**\n   * Whether to hide a state icon within the tooltip\n   */\n  hideIcon?: boolean;\n  /**\n   * A callback function to render the tooltip content\n   * @param {function} getIcon getter for the icon based on the state\n   * @param {function} getIconProps getter for the icon properties\n   */\n  render?: (props: TooltipRenderProp) => ReactNode;\n  /**\n   * A string to determine the current state of the tooltip\n   */\n  state?: TooltipState;\n  title?: string;\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id?: string;\n  open?: boolean;\n}\n\nexport const Tooltip = forwardRef<HTMLDivElement, TooltipProps>(\n  function Tooltip(\n    {\n      arrowProps,\n      children,\n      className: classNameProp,\n      container,\n      disablePortal,\n      hideArrow,\n      hideIcon,\n      open,\n      render,\n      state = \"info\",\n      title,\n      ...rest\n    },\n    ref\n  ) {\n    const getIcon = useCallback(\n      (iconProps: IconProps) => {\n        if (hideIcon) {\n          return null;\n        }\n        const StateIcon = getIconForState(state);\n        return StateIcon ? (\n          <StateIcon {...iconProps} {...defaultIconProps} />\n        ) : null;\n      },\n      [state, hideIcon]\n    );\n\n    const Window = useWindow();\n\n    if (!open) {\n      return null;\n    }\n\n    return (\n      <Portal disablePortal={disablePortal} container={container}>\n        <Window\n          className={cn(withBaseName(), withBaseName(state))}\n          ref={ref}\n          {...rest}\n        >\n          <div className={withBaseName(\"content\")}>\n            {render ? (\n              render({\n                Icon: (passedProps: IconProps) => getIcon(passedProps),\n                getIconProps: () => defaultIconProps,\n              })\n            ) : (\n              <>\n                {getIcon({})}\n                <span className={withBaseName(\"body\")}>{title}</span>\n              </>\n            )}\n          </div>\n          {!hideArrow && (\n            <div className={withBaseName(\"arrow\")} {...arrowProps} />\n          )}\n        </Window>\n      </Portal>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}