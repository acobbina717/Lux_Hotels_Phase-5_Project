{"ast":null,"code":"import { jsxs, Fragment, jsx } from 'react/jsx-runtime';\nimport cx from 'classnames';\nimport { useState, forwardRef, useRef, useMemo } from 'react';\nimport { FormFieldContext } from '../form-field-context/FormFieldContext.js';\nimport { makePrefixer } from '../utils/makePrefixer.js';\nimport { useForkRef } from '../utils/useForkRef.js';\nimport { useId } from '../utils/useId.js';\nimport '../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../theme/Theme.js';\nimport { Tooltip } from '../tooltip/Tooltip.js';\nimport '../tooltip/TooltipContext.js';\nimport { useTooltip } from '../tooltip/useTooltip.js';\nimport { classBase } from './constant.js';\nimport { FormActivationIndicator } from './FormActivationIndicator.js';\nimport { FormHelperText } from './FormHelperText.js';\nimport { FormLabel } from './FormLabel.js';\nimport './FormField.css.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst useA11yValue = _ref => {\n  let {\n    required,\n    disabled,\n    readOnly,\n    labelId,\n    helperTextId,\n    renderHelperText\n  } = _ref;\n  return useMemo(() => ({\n    \"aria-labelledby\": labelId,\n    \"aria-required\": required,\n    \"aria-describedby\": renderHelperText ? helperTextId : void 0,\n    disabled,\n    readOnly\n  }), [labelId, disabled, readOnly, required, renderHelperText, helperTextId]);\n};\n\nconst useFormField = _ref2 => {\n  let {\n    onBlur,\n    onFocus\n  } = _ref2;\n  const [focused, setFocused] = useState(false);\n\n  const handleBlur = event => {\n    setFocused(false);\n    onBlur == null ? void 0 : onBlur(event);\n  };\n\n  const handleFocus = event => {\n    setFocused(true);\n    onFocus == null ? void 0 : onFocus(event);\n  };\n\n  return [{\n    focused\n  }, {\n    setFocused\n  }, {\n    onBlur: handleBlur,\n    onFocus: handleFocus\n  }];\n};\n\nconst withBaseName = makePrefixer(classBase);\nconst FormField = /* @__PURE__ */forwardRef((_a, ref) => {\n  var _b = _a,\n      {\n    ActivationIndicatorComponent = FormActivationIndicator,\n    children,\n    className,\n    disabled,\n    disableFocusRing = false,\n    fullWidth = true,\n    hasStatusIndicator,\n    HelperTextComponent = FormHelperText,\n    HelperTextProps,\n    helperText,\n    helperTextPlacement = \"bottom\",\n    label,\n    LabelComponent = FormLabel,\n    labelPlacement = \"top\",\n    LabelProps = {\n      displayedNecessity: \"required\"\n    },\n    onBlur,\n    onFocus,\n    readOnly,\n    required,\n    StatusIndicatorProps,\n    validationState\n  } = _b,\n      restProps = __objRest(_b, [\"ActivationIndicatorComponent\", \"children\", \"className\", \"disabled\", \"disableFocusRing\", \"fullWidth\", \"hasStatusIndicator\", \"HelperTextComponent\", \"HelperTextProps\", \"helperText\", \"helperTextPlacement\", \"label\", \"LabelComponent\", \"labelPlacement\", \"LabelProps\", \"onBlur\", \"onFocus\", \"readOnly\", \"required\", \"StatusIndicatorProps\", \"validationState\"]);\n\n  const labelId = useId(LabelProps == null ? void 0 : LabelProps.id);\n  const helperTextId = useId(HelperTextProps == null ? void 0 : HelperTextProps.id);\n  const rootRef = useRef(null);\n  const renderHelperText = !!helperText;\n  const a11yValue = useA11yValue({\n    required,\n    disabled,\n    readOnly,\n    labelId,\n    helperTextId,\n    renderHelperText\n  });\n  const [states, dispatchers, eventHandlers] = useFormField({\n    onBlur,\n    onFocus\n  });\n  const labelTop = labelPlacement === \"top\";\n  const labelLeft = labelPlacement === \"left\";\n  const isWarning = validationState === \"warning\";\n  const isError = validationState === \"error\";\n  const focusClass = disableFocusRing ? \"lowFocused\" : \"focused\";\n  const inlineHelperText = renderHelperText && helperTextPlacement === \"bottom\";\n  const tooltipHelperText = renderHelperText && helperTextPlacement === \"tooltip\" && !hasStatusIndicator;\n  const {\n    getTooltipProps,\n    getTriggerProps\n  } = useTooltip({\n    disabled: !tooltipHelperText\n  });\n\n  const _a2 = getTriggerProps(__spreadValues(__spreadValues({\n    className: cx(withBaseName(), {\n      [withBaseName(\"disabled\")]: disabled,\n      [withBaseName(\"readOnly\")]: readOnly,\n      [withBaseName(\"warning\")]: isWarning,\n      [withBaseName(\"error\")]: isError,\n      [withBaseName(\"fullWidth\")]: fullWidth,\n      [withBaseName(focusClass)]: states.focused,\n      [withBaseName(\"labelTop\")]: labelTop,\n      [withBaseName(\"labelLeft\")]: labelLeft,\n      [withBaseName(`withHelperText`)]: inlineHelperText\n    }, className)\n  }, eventHandlers), restProps)),\n        {\n    ref: triggerRef\n  } = _a2,\n        triggerProps = __objRest(_a2, [\"ref\"]);\n\n  const handleTriggerRef = useForkRef(triggerRef, rootRef);\n  const handleRef = useForkRef(handleTriggerRef, ref);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(\"div\", __spreadProps(__spreadValues({\n      ref: handleRef\n    }, triggerProps), {\n      children: /* @__PURE__ */jsxs(FormFieldContext.Provider, {\n        value: __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, states), dispatchers), eventHandlers), {\n          a11yProps: a11yValue,\n          inFormField: true,\n          ref: rootRef\n        }),\n        children: [!!label && /* @__PURE__ */jsx(LabelComponent, __spreadProps(__spreadValues({}, LabelProps), {\n          validationState,\n          hasStatusIndicator,\n          StatusIndicatorProps,\n          className: LabelProps.className,\n          label,\n          disabled,\n          readOnly,\n          required,\n          tooltipText: helperText,\n          id: labelId\n        })), children, /* @__PURE__ */jsx(ActivationIndicatorComponent, {\n          hasIcon: !hasStatusIndicator,\n          validationState\n        }), renderHelperText && /* @__PURE__ */jsx(HelperTextComponent, __spreadProps(__spreadValues({\n          helperText,\n          helperTextPlacement\n        }, HelperTextProps), {\n          id: helperTextId\n        }))]\n      })\n    })), /* @__PURE__ */jsx(Tooltip, __spreadValues({}, getTooltipProps({\n      title: helperText\n    })))]\n  });\n});\nexport { FormField, useFormField };","map":{"version":3,"mappings":"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","names":["cx","forwardRef","useMemo","Object","useRef","FormFieldContext","hasOwnProperty","useForkRef","propertyIsEnumerable","classBase","key","enumerable","configurable","writable","value","FormActivationIndicator","FormHelperText","b","FormLabel","prop","__defNormalProp","useA11yValue","__getOwnPropSymbols","labelId","__objRest","readOnly","source","exclude","target","required","disabled","helperTextId","renderHelperText","onBlur","onFocus","displayedNecessity","setFocused","useState","a11yValue","focusClass","withBaseName","ref","FormField","getTriggerProps","className","ActivationIndicatorComponent","children","disableFocusRing","fullWidth","hasStatusIndicator","HelperTextComponent","HelperTextProps","helperText","helperTextPlacement","label","LabelComponent","labelPlacement","LabelProps","StatusIndicatorProps","validationState","_b","restProps","handleRef","eventHandlers","useFormField","dispatchers","a11yProps","useTooltip","inFormField","states","inlineHelperText","tooltipText","_a2","triggerProps","id","_jsxs","__spreadProps","title"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/form-field/FormField.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport {\n  Dispatch,\n  ElementType,\n  FocusEventHandler,\n  ForwardedRef,\n  forwardRef,\n  HTMLAttributes,\n  SetStateAction,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { FormFieldContext } from \"../form-field-context\";\nimport { Tooltip, useTooltip } from \"../tooltip\";\nimport { makePrefixer, useForkRef, useId } from \"../utils\";\nimport { classBase } from \"./constant\";\nimport {\n  FormActivationIndicator,\n  FormActivationIndicatorProps,\n} from \"./FormActivationIndicator\";\nimport { FormHelperText, FormHelperTextProps } from \"./FormHelperText\";\nimport { FormLabel, FormLabelProps } from \"./FormLabel\";\nimport { NecessityIndicatorOptions } from \"./NecessityIndicator\";\nimport { StatusIndicatorProps } from \"./StatusIndicator\";\n\nimport \"./FormField.css\";\n\nexport type FormFieldLabelPlacement = \"top\" | \"left\";\nexport type FormFieldHelperTextPlacement = \"bottom\" | \"tooltip\";\nexport type FormFieldValidationState = \"error\" | \"warning\";\n\nexport interface A11yValueProps\n  extends Pick<NecessityIndicatorOptions, \"required\"> {\n  /**\n   * If `true`, the FormField will be disabled.\n   */\n  disabled?: boolean;\n  /** id of the helper text node */\n  helperTextId?: string;\n  /** id of the label node */\n  labelId?: string;\n  /**\n   * The FormField value is Readonly\n   */\n  readOnly?: boolean;\n\n  /**\n   * Whether the form field needs to render helper text\n   */\n  renderHelperText?: boolean;\n}\n\nexport interface FormFieldProps\n  extends HTMLAttributes<HTMLDivElement>,\n    A11yValueProps {\n  /**\n   * The component used for activation indicator. Default to `FormActivationIndicator`.\n   */\n  ActivationIndicatorComponent?: ElementType<FormActivationIndicatorProps>;\n  /**\n   * Outer focus ring focus will not be applied. Defaults to false.\n   */\n  disableFocusRing?: boolean;\n  // I hate this fullWidth business. We should support a width prop. The default should be 100% (standard block behaviour)\n  // we should also support 'auto' or explicit numeric values\n  /**\n   * Whether the form field is occupying full width.\n   */\n  fullWidth?: boolean;\n  /**\n   * Whether to show the StatusIndicator component for validation states.\n   */\n  hasStatusIndicator?: boolean;\n  /**\n   * The helper text content\n   */\n  helperText?: string;\n  /**\n   * The component used for the helper text. Default to `FormHelperText`.\n   */\n  HelperTextComponent?: ElementType<FormHelperTextProps>;\n  /**\n   * Location the helperText, values: 'bottom' (default) or 'tooltip'.\n   */\n  helperTextPlacement?: FormFieldHelperTextPlacement;\n  /**\n   * Props to be applied to the `HelperTextComponent`.\n   *\n   * Generic on `FormHelperTextProps` is omitted.\n   */\n  HelperTextProps?: Partial<FormHelperTextProps>;\n  /**\n   * The label value for the FormField\n   */\n  label?: string;\n  /**\n   * The component used for the label. Default to `FormLabel`.\n   */\n  LabelComponent?: ElementType;\n  /**\n   * Location the label, values: 'top' (default) or 'left'\n   */\n  labelPlacement?: FormFieldLabelPlacement;\n  /**\n   * Props to be applied to the `LabelComponent`\n   */\n  LabelProps?: Partial<FormLabelProps>;\n  /**\n   * Override props to be used with the StatusIndicator component\n   */\n  StatusIndicatorProps?: Partial<StatusIndicatorProps>;\n  /**\n   * The state for the FormField: Must be one of: 'error'|'warning'|undefined\n   */\n  validationState?: FormFieldValidationState;\n}\n\nexport interface useA11yValueValue {\n  \"aria-labelledby\": A11yValueProps[\"labelId\"];\n  \"aria-required\": A11yValueProps[\"required\"];\n  \"aria-describedby\": A11yValueProps[\"helperTextId\"] | undefined;\n  disabled: A11yValueProps[\"disabled\"];\n  readOnly: A11yValueProps[\"readOnly\"];\n}\n\nconst useA11yValue = ({\n  required,\n  disabled,\n  readOnly,\n  labelId,\n  helperTextId,\n  renderHelperText,\n}: A11yValueProps) => {\n  return useMemo(\n    () => ({\n      \"aria-labelledby\": labelId,\n      \"aria-required\": required,\n      \"aria-describedby\": renderHelperText ? helperTextId : undefined,\n      disabled,\n      readOnly,\n    }),\n    [labelId, disabled, readOnly, required, renderHelperText, helperTextId]\n  );\n};\n\n// TODO: Add TS props for this\nexport const useFormField = ({\n  onBlur,\n  onFocus,\n}: {\n  onBlur?: FocusEventHandler<HTMLDivElement>;\n  onFocus?: FocusEventHandler<HTMLDivElement>;\n}): [\n  { focused: boolean },\n  { setFocused: Dispatch<SetStateAction<boolean>> },\n  {\n    onBlur: FocusEventHandler<HTMLDivElement>;\n    onFocus: FocusEventHandler<HTMLDivElement>;\n  }\n] => {\n  const [focused, setFocused] = useState(false);\n  const handleBlur: FocusEventHandler<HTMLDivElement> = (event) => {\n    setFocused(false);\n    onBlur?.(event);\n  };\n  const handleFocus: FocusEventHandler<HTMLDivElement> = (event) => {\n    setFocused(true);\n    onFocus?.(event);\n  };\n  return [\n    {\n      focused,\n    },\n    {\n      setFocused,\n    },\n    {\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n    },\n  ];\n};\n\nconst withBaseName = makePrefixer(classBase);\n\nexport const FormField = forwardRef(\n  (\n    {\n      ActivationIndicatorComponent = FormActivationIndicator,\n      children,\n      className,\n      disabled,\n      disableFocusRing = false,\n      fullWidth = true,\n      hasStatusIndicator,\n      HelperTextComponent = FormHelperText,\n      HelperTextProps,\n      helperText,\n      helperTextPlacement = \"bottom\",\n      label,\n      LabelComponent = FormLabel,\n      labelPlacement = \"top\",\n      LabelProps = { displayedNecessity: \"required\" },\n      onBlur,\n      onFocus,\n      readOnly,\n      required,\n      StatusIndicatorProps,\n      validationState,\n      ...restProps\n    }: FormFieldProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    const labelId = useId(LabelProps?.id);\n    const helperTextId = useId(HelperTextProps?.id);\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const renderHelperText = !!helperText;\n\n    const a11yValue = useA11yValue({\n      required,\n      disabled,\n      readOnly,\n      labelId,\n      helperTextId,\n      renderHelperText,\n    });\n\n    const [states, dispatchers, eventHandlers] = useFormField({\n      onBlur,\n      onFocus,\n    });\n\n    const labelTop = labelPlacement === \"top\";\n    const labelLeft = labelPlacement === \"left\";\n    const isWarning = validationState === \"warning\";\n    const isError = validationState === \"error\";\n    const focusClass = disableFocusRing\n      ? \"lowFocused\"\n      : \"focused\"; /* Low emphasis will override this */\n    const inlineHelperText =\n      renderHelperText && helperTextPlacement === \"bottom\";\n    const tooltipHelperText =\n      renderHelperText &&\n      helperTextPlacement === \"tooltip\" &&\n      !hasStatusIndicator;\n\n    const { getTooltipProps, getTriggerProps } = useTooltip({\n      disabled: !tooltipHelperText,\n    });\n\n    const { ref: triggerRef, ...triggerProps } = getTriggerProps({\n      className: cx(\n        withBaseName(),\n        {\n          [withBaseName(\"disabled\")]: disabled,\n          [withBaseName(\"readOnly\")]: readOnly,\n          [withBaseName(\"warning\")]: isWarning,\n          [withBaseName(\"error\")]: isError,\n          [withBaseName(\"fullWidth\")]: fullWidth,\n          [withBaseName(focusClass)]: states.focused,\n          [withBaseName(\"labelTop\")]: labelTop,\n          [withBaseName(\"labelLeft\")]: labelLeft,\n          [withBaseName(`withHelperText`)]: inlineHelperText,\n        },\n        className\n      ),\n      ...eventHandlers,\n      ...restProps,\n    });\n\n    const handleTriggerRef = useForkRef(triggerRef, rootRef);\n    const handleRef = useForkRef(handleTriggerRef, ref);\n\n    return (\n      <>\n        <div ref={handleRef} {...triggerProps}>\n          <FormFieldContext.Provider\n            value={{\n              ...states,\n              ...dispatchers,\n              ...eventHandlers,\n              a11yProps: a11yValue,\n              inFormField: true,\n              ref: rootRef,\n            }}\n          >\n            {!!label && (\n              <LabelComponent\n                {...LabelProps}\n                validationState={validationState}\n                hasStatusIndicator={hasStatusIndicator}\n                StatusIndicatorProps={StatusIndicatorProps}\n                className={LabelProps.className}\n                label={label}\n                disabled={disabled}\n                readOnly={readOnly}\n                required={required}\n                tooltipText={helperText}\n                id={labelId}\n              />\n            )}\n            {children}\n            <ActivationIndicatorComponent\n              hasIcon={!hasStatusIndicator}\n              validationState={validationState}\n            />\n            {renderHelperText && (\n              <HelperTextComponent\n                helperText={helperText}\n                helperTextPlacement={helperTextPlacement}\n                {...HelperTextProps}\n                id={helperTextId}\n              />\n            )}\n          </FormFieldContext.Provider>\n        </div>\n        <Tooltip {...getTooltipProps({ title: helperText })} />\n      </>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}