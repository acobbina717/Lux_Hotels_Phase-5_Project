{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useState, useRef, isValidElement, cloneElement } from 'react';\nimport { createPortal } from 'react-dom';\nimport { ToolkitProvider } from '../toolkit-provider/ToolkitProvider.js';\nimport { ownerDocument } from '../utils/ownerDocument.js';\nimport { useForkRef } from '../utils/useForkRef.js';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect.js';\n\nfunction getContainer(container) {\n  return typeof container === \"function\" ? container() : container;\n}\n\nconst DEFAULT_ID = \"portal-root\";\nconst Portal = /* @__PURE__ */forwardRef(function Portal2(_ref, ref) {\n  let {\n    children,\n    container: containerProp = document.body,\n    disablePortal = false,\n    id = DEFAULT_ID\n  } = _ref;\n\n  var _a;\n\n  const [mounted, setMounted] = useState(false);\n  const portalRef = useRef(null);\n  const handleRef = useForkRef( /* @__PURE__ */isValidElement(children) ? children.ref : null, ref);\n  const container = (_a = getContainer(containerProp)) != null ? _a : document.body;\n  useIsomorphicLayoutEffect(() => {\n    const root = ownerDocument(container).getElementById(id);\n\n    if (root) {\n      portalRef.current = root;\n    } else {\n      portalRef.current = ownerDocument(container).createElement(\"div\");\n      portalRef.current.id = id;\n    }\n\n    const el = portalRef.current;\n\n    if (!container.contains(el)) {\n      container.appendChild(el);\n    }\n\n    setMounted(true);\n  }, [id, container]);\n\n  if (disablePortal) {\n    if ( /* @__PURE__ */isValidElement(children)) {\n      return /* @__PURE__ */cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  if (mounted && portalRef.current && children) {\n    return /* @__PURE__ */createPortal( /* @__PURE__ */jsx(ToolkitProvider, {\n      children\n    }), portalRef.current);\n  }\n\n  return null;\n});\nexport { Portal };","map":{"version":3,"mappings":";;;;;;;;AAqCA,SAASA,YAAT,CAAsBC,SAAtB,EAA2D;SAClD,qBAAqB,UAArB,GAAqBA,SAAsB,EAA3C,GAAgDA;AACxD;;AAED,MAAMC,UAAU,GAAG,aAAnB;AAEA;EAAA;IAAAC;IAAAF;IAAAG;IAAAC;EAAA;;;;;EAGG,MACIC,SAAMC,GAAMC,YADhB;QAUKC,SAAQ,GAAEC,UAAU,iBAAkBC,cAAE,UAAF,GAAER,YAAF,GAAE,IAApB,EAAoBS,GAApB;EAC1B,kBAAkBJ,kBAAiC,eAAjCA,KAAiC,IAAjCA,GAAiCK,EAAjCL,GAAiCM,aAAnD;EACAC,yBAA4B,OACb;IACbJ,sCAAwBK,cAAxBL,CAAuCN,EAAvCM;;IAIF,IAAMV,IAAN,EAAMA;MAENc;KAFA,MAGQE;MAENX,UAAQY,OAAR,GAAUC,6CAAV;MACEb,kBAAUY,EAAVZ,GAAiBD,EAAjBC;;;IAEAA,oBAAUY,QAAVZ;;IACAA,wBAAiBc,EAAjBd,GAAoB;MACrBL;IAED;;IAEAS,UAAc,MAAd;EACET,CArBwB,EAqBxBA,CACDI,EADCJ,YArBwB,CAA5B;;qBAyBM;wBAAWU;MAAE,sBAACU;QAEhBjB;MAFgB,EAAD;;;IAKbQ;EACD;;EACF;IACD,sBAAgCU;MACjCnB;IADiC,IAG9BoB,SAAWjB,QAHmB,CAAhC;;;;AAK+C,CArDnD","names":["getContainer","container","DEFAULT_ID","children","disablePortal","id","portalRef","Portal","useRef","handleRef","setMounted","isValidElement","ref","_a","document","useIsomorphicLayoutEffect","getElementById","root","current","ownerDocument","el","cloneElement","createPortal","mounted"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/portal/Portal.tsx"],"sourcesContent":["import {\n  cloneElement,\n  forwardRef,\n  isValidElement,\n  ReactElement,\n  ReactNode,\n  useRef,\n  useState,\n} from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { ToolkitProvider } from \"../toolkit-provider\";\nimport { ownerDocument, useForkRef, useIsomorphicLayoutEffect } from \"../utils\";\n\nexport interface PortalProps {\n  /**\n   * The children to render into the `container`.\n   */\n  children?: ReactNode;\n  /**\n   * An HTML element, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container?: Element | (() => Element | null) | null;\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal?: boolean;\n  /**\n   * If this node does not exist on the document, it will be created for you.\n   */\n  id?: string;\n}\n\nfunction getContainer(container: PortalProps[\"container\"]) {\n  return typeof container === \"function\" ? container() : container;\n}\n\nconst DEFAULT_ID = \"portal-root\";\n\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\nexport const Portal = forwardRef<HTMLElement, PortalProps>(function Portal(\n  {\n    children,\n    container: containerProp = document.body,\n    disablePortal = false,\n    id = DEFAULT_ID,\n  },\n  ref\n) {\n  const [mounted, setMounted] = useState(false);\n  const portalRef = useRef<HTMLElement | null>(null);\n  const handleRef = useForkRef(\n    // @ts-ignore\n    isValidElement(children) ? children.ref : null,\n    ref\n  );\n\n  const container = getContainer(containerProp) ?? document.body;\n\n  useIsomorphicLayoutEffect(() => {\n    const root = ownerDocument(container).getElementById(id);\n\n    if (root) {\n      portalRef.current = root;\n    } else {\n      portalRef.current = ownerDocument(container).createElement(\"div\");\n      portalRef.current.id = id;\n    }\n\n    const el = portalRef.current;\n\n    if (!container.contains(el)) {\n      container.appendChild(el);\n    }\n\n    setMounted(true);\n  }, [id, container]);\n\n  if (disablePortal) {\n    if (isValidElement(children)) {\n      return cloneElement(children, {\n        ref: handleRef,\n      });\n    }\n    return children as ReactElement;\n  }\n\n  if (mounted && portalRef.current && children) {\n    return createPortal(\n      <ToolkitProvider>{children}</ToolkitProvider>,\n      portalRef.current\n    );\n  }\n\n  return null;\n});\n"]},"metadata":{},"sourceType":"module"}