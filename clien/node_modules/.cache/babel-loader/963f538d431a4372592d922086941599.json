{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { ownerDocument } from '../utils/ownerDocument.js';\nimport 'react/jsx-runtime';\nimport 'classnames';\nimport '../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../theme/Theme.js';\n\nfunction getSelectionRange(input, _ref) {\n  let {\n    highlightOnFocus,\n    cursorPositionOnFocus\n  } = _ref;\n\n  if (highlightOnFocus === true) {\n    return [0, input.value.length];\n  }\n\n  if (Array.isArray(highlightOnFocus) && highlightOnFocus.length > 1) {\n    return [highlightOnFocus[0], highlightOnFocus[1]];\n  }\n\n  if (cursorPositionOnFocus === \"start\") {\n    return [0, 0];\n  }\n\n  if (cursorPositionOnFocus === \"end\") {\n    return [input.value.length, input.value.length];\n  }\n\n  if (cursorPositionOnFocus != null && !isNaN(cursorPositionOnFocus)) {\n    return [cursorPositionOnFocus, cursorPositionOnFocus];\n  }\n\n  return [null, null];\n}\n\nfunction isSafari() {\n  return navigator.userAgent.toLowerCase().includes(\"safari\") && !navigator.userAgent.toLowerCase().includes(\"chrome\");\n}\n\nfunction isFirefox() {\n  return navigator.userAgent.toLowerCase().includes(\"firefox\");\n}\n\nfunction useCursorOnFocus(inputRef, _ref2) {\n  let {\n    cursorPositionOnFocus,\n    highlightOnFocus\n  } = _ref2;\n  const wasClick = useRef(false);\n  const timeoutRef = useRef(-1);\n  const originalCursorPosition = useRef(-1);\n  const selectionInProgress = useRef(false);\n  const mouseMovement = useRef(0);\n  const selection = useRef([null, null]);\n  const wasWindowFocus = useRef(false);\n\n  const handleMouseDown = () => {\n    wasClick.current = true;\n  };\n\n  const handleMouseMove = event => {\n    var _a;\n\n    if (selectionInProgress.current) {\n      mouseMovement.current += Math.abs(event.movementX) + Math.abs(event.movementY);\n\n      if (mouseMovement.current < 3) {\n        event.preventDefault();\n        return;\n      }\n\n      if (typeof originalCursorPosition.current == \"number\") {\n        (_a = inputRef.current) == null ? void 0 : _a.setSelectionRange(originalCursorPosition.current, originalCursorPosition.current);\n      }\n\n      selectionInProgress.current = false;\n    }\n  };\n\n  const handleMouseUp = () => {\n    const isValidBrowser = isFirefox() || isSafari();\n\n    if (selectionInProgress.current && mouseMovement.current < 3 && isValidBrowser && Array.isArray(selection.current)) {\n      const [start, end] = selection.current;\n      setTimeout(() => {\n        var _a, _b, _c;\n\n        if ((((_a = inputRef.current) == null ? void 0 : _a.selectionStart) !== start || ((_b = inputRef.current) == null ? void 0 : _b.selectionEnd) !== end) && typeof start === \"number\" && typeof end === \"number\") {\n          (_c = inputRef.current) == null ? void 0 : _c.setSelectionRange(start, end);\n        }\n      }, 0);\n    }\n\n    wasClick.current = false;\n    selectionInProgress.current = false;\n    mouseMovement.current = 0;\n  };\n\n  useEffect(() => {\n    if (cursorPositionOnFocus != null || highlightOnFocus != null) {\n      const handleFocusBehaviour = () => {\n        var _a;\n\n        if (!inputRef.current) {\n          return;\n        }\n\n        const [start, end] = getSelectionRange(inputRef.current, {\n          highlightOnFocus,\n          cursorPositionOnFocus\n        });\n\n        if (start !== null && end !== null) {\n          window.clearTimeout(timeoutRef.current);\n          const needsTimeout = isSafari() || wasClick.current;\n\n          if (wasClick.current) {\n            selectionInProgress.current = true;\n            mouseMovement.current = 0;\n          }\n\n          selection.current = [start, end];\n\n          if (needsTimeout) {\n            timeoutRef.current = window.setTimeout(() => {\n              var _a2, _b;\n\n              if (wasClick.current) {\n                originalCursorPosition.current = (_a2 = inputRef.current) == null ? void 0 : _a2.selectionStart;\n              }\n\n              (_b = inputRef.current) == null ? void 0 : _b.setSelectionRange(start, end);\n            }, 0);\n          } else {\n            (_a = inputRef.current) == null ? void 0 : _a.setSelectionRange(start, end);\n          }\n        }\n      };\n\n      const handleFocusIn = () => {\n        if (wasWindowFocus.current) {\n          wasWindowFocus.current = false;\n          return;\n        }\n\n        if (cursorPositionOnFocus != null || highlightOnFocus != null) {\n          handleFocusBehaviour();\n        }\n      };\n\n      const handleWindowFocus = () => {\n        const doc = ownerDocument(inputRef.current);\n\n        if (doc.visibilityState === \"visible\" && doc.activeElement === inputRef.current) {\n          wasClick.current = false;\n          selectionInProgress.current = false;\n          mouseMovement.current = 0;\n          wasWindowFocus.current = true;\n        }\n      };\n\n      const eventName = isSafari() || isFirefox() ? \"focusIn\" : \"focus\";\n      const input = inputRef.current;\n      const doc1 = ownerDocument(inputRef.current);\n      input == null ? void 0 : input.addEventListener(eventName, handleFocusIn);\n      doc1.addEventListener(\"visibilitychange\", handleWindowFocus);\n      return () => {\n        input == null ? void 0 : input.removeEventListener(eventName, handleFocusIn);\n        doc1 == null ? void 0 : doc1.removeEventListener(\"visibilitychange\", handleWindowFocus);\n      };\n    }\n\n    return void 0;\n  }, [cursorPositionOnFocus, highlightOnFocus, inputRef]);\n  return {\n    handleMouseDown,\n    handleMouseMove,\n    handleMouseUp\n  };\n}\n\nexport { useCursorOnFocus };","map":{"version":3,"mappings":"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","names":["getSelectionRange","input","highlightOnFocus","cursorPositionOnFocus","value","isSafari","toLowerCase","includes","isFirefox","userAgent","useCursorOnFocus","useRef","wasWindowFocus","wasClick","handleMouseDown","handleMouseMove","selectionInProgress","current","Math","event","movementX","originalCursorPosition","_a","inputRef","setSelectionRange","handleMouseUp","selection","setTimeout","end","start","_c","mouseMovement","useEffect","handleFocusBehaviour","window","timeoutRef","needsTimeout","_a2","selectionStart","handleFocusIn","handleWindowFocus","doc","visibilityState","eventName","doc1"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/input/useCursorOnFocus.ts"],"sourcesContent":["import { ownerDocument } from \"../utils\";\nimport { MouseEvent, MutableRefObject, useEffect, useRef } from \"react\";\n\nfunction getSelectionRange(\n  input: HTMLInputElement,\n  { highlightOnFocus, cursorPositionOnFocus }: useCursorOnFocusProps\n): [number | null, number | null] {\n  // highlightOnFocus highlight first so it takes priority over position on focus\n  if (highlightOnFocus === true) {\n    return [0, input.value.length];\n  }\n  if (Array.isArray(highlightOnFocus) && highlightOnFocus.length > 1) {\n    return [highlightOnFocus[0], highlightOnFocus[1]];\n  }\n\n  if (cursorPositionOnFocus === \"start\") {\n    return [0, 0];\n  }\n\n  if (cursorPositionOnFocus === \"end\") {\n    return [input.value.length, input.value.length];\n  }\n\n  if (cursorPositionOnFocus != null && !isNaN(cursorPositionOnFocus)) {\n    return [cursorPositionOnFocus, cursorPositionOnFocus];\n  }\n  return [null, null];\n}\n\nfunction isSafari() {\n  return (\n    navigator.userAgent.toLowerCase().includes(\"safari\") &&\n    !navigator.userAgent.toLowerCase().includes(\"chrome\")\n  );\n}\n\nfunction isFirefox() {\n  return navigator.userAgent.toLowerCase().includes(\"firefox\");\n}\n\nexport interface useCursorOnFocusProps {\n  /**\n   * Determines the position of the text cursor on focus of the input.\n   *\n   * start = place cursor at the beginning\n   * end = place cursor at the end\n   * \\# = index to place the cursor\n   */\n  cursorPositionOnFocus?: \"start\" | \"end\" | number;\n  /**\n   * Determines what gets highlighted on focus of the input.\n   *\n   * If `true` all text will be highlighted.\n   * If an array text between those indices will be highlighted\n   * e.g. [0,1] will highlight the first character.\n   */\n  highlightOnFocus?: boolean | number[];\n}\n\nexport function useCursorOnFocus(\n  inputRef: MutableRefObject<HTMLInputElement | null>,\n  { cursorPositionOnFocus, highlightOnFocus }: useCursorOnFocusProps\n) {\n  const wasClick = useRef(false);\n  const timeoutRef = useRef<number>(-1);\n  const originalCursorPosition = useRef<number | null | undefined>(-1);\n  const selectionInProgress = useRef(false);\n  const mouseMovement = useRef(0);\n\n  const selection = useRef<[number | null, number | null]>([null, null]);\n  const wasWindowFocus = useRef(false);\n\n  const handleMouseDown = () => {\n    wasClick.current = true;\n  };\n\n  const handleMouseMove = (event: MouseEvent) => {\n    if (selectionInProgress.current) {\n      mouseMovement.current +=\n        Math.abs(event.movementX) + Math.abs(event.movementY);\n\n      //Prevents the slightest mouse movement triggering the cursor to be repositioned.\n      if (mouseMovement.current < 3) {\n        event.preventDefault();\n\n        return;\n      }\n\n      if (typeof originalCursorPosition.current == \"number\") {\n        // Allows continued highlighted if the mouse down is part of a selection.\n        inputRef.current?.setSelectionRange(\n          originalCursorPosition.current,\n          originalCursorPosition.current\n        );\n      }\n\n      //Reset so originalCursorPosition is only set once.\n      selectionInProgress.current = false;\n    }\n  };\n\n  const handleMouseUp = () => {\n    const isValidBrowser = isFirefox() || isSafari();\n    if (\n      selectionInProgress.current &&\n      mouseMovement.current < 3 &&\n      isValidBrowser &&\n      Array.isArray(selection.current)\n    ) {\n      const [start, end] = selection.current;\n      setTimeout(() => {\n        if (\n          (inputRef.current?.selectionStart !== start ||\n            inputRef.current?.selectionEnd !== end) &&\n          typeof start === \"number\" &&\n          typeof end === \"number\"\n        ) {\n          inputRef.current?.setSelectionRange(start, end);\n        }\n      }, 0);\n    }\n\n    wasClick.current = false;\n    selectionInProgress.current = false;\n    mouseMovement.current = 0;\n  };\n\n  useEffect(() => {\n    if (cursorPositionOnFocus != null || highlightOnFocus != null) {\n      const handleFocusBehaviour = () => {\n        if (!inputRef.current) {\n          return;\n        }\n\n        const [start, end] = getSelectionRange(inputRef.current, {\n          highlightOnFocus,\n          cursorPositionOnFocus,\n        });\n        if (start !== null && end !== null) {\n          window.clearTimeout(timeoutRef.current);\n          const needsTimeout = isSafari() || wasClick.current;\n\n          if (wasClick.current) {\n            selectionInProgress.current = true;\n            mouseMovement.current = 0;\n          }\n\n          selection.current = [start, end];\n          // Keyboard focus needs to be outside setTimeout otherwise a flash of selected text appears.\n          if (needsTimeout) {\n            // Make's sure setSelectionRange is run after browser has set cursor position.\n            timeoutRef.current = window.setTimeout(() => {\n              if (wasClick.current) {\n                originalCursorPosition.current =\n                  inputRef.current?.selectionStart;\n              }\n              inputRef.current?.setSelectionRange(start, end);\n            }, 0);\n          } else {\n            inputRef.current?.setSelectionRange(start, end);\n          }\n        }\n      };\n\n      const handleFocusIn = () => {\n        // Ignore focus of input on window focus\n        if (wasWindowFocus.current) {\n          wasWindowFocus.current = false;\n          return;\n        }\n\n        if (cursorPositionOnFocus != null || highlightOnFocus != null) {\n          handleFocusBehaviour();\n        }\n      };\n\n      //Reset everything on window re-focus\n      const handleWindowFocus = () => {\n        const doc = ownerDocument(inputRef.current);\n        if (\n          doc.visibilityState === \"visible\" &&\n          doc.activeElement === inputRef.current\n        ) {\n          wasClick.current = false;\n          selectionInProgress.current = false;\n          mouseMovement.current = 0;\n          wasWindowFocus.current = true;\n        }\n      };\n\n      const eventName = isSafari() || isFirefox() ? \"focusIn\" : \"focus\";\n      const input = inputRef.current;\n      const doc = ownerDocument(inputRef.current);\n      input?.addEventListener(eventName, handleFocusIn);\n      doc.addEventListener(\"visibilitychange\", handleWindowFocus);\n\n      return () => {\n        input?.removeEventListener(eventName, handleFocusIn);\n        doc?.removeEventListener(\"visibilitychange\", handleWindowFocus);\n      };\n    }\n\n    return undefined;\n  }, [cursorPositionOnFocus, highlightOnFocus, inputRef]);\n\n  return { handleMouseDown, handleMouseMove, handleMouseUp };\n}\n"]},"metadata":{},"sourceType":"module"}