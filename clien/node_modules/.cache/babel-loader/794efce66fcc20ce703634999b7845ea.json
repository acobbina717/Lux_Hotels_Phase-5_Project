{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport cx from 'classnames';\nimport { forwardRef, useCallback } from 'react';\nimport { pillBaseName } from './constants.js';\nimport { PillBase } from './internal/PillBase.js';\nimport { PillCheckbox } from './internal/PillCheckbox.js';\nimport { makePrefixer } from '../utils/makePrefixer.js';\nimport { useControlled } from '../utils/useControlled.js';\nimport '../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../theme/Theme.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst noop = () => void 0;\n\nconst withBaseName = makePrefixer(pillBaseName);\nconst SelectablePill = /* @__PURE__ */forwardRef(function SelectablePill2(_a, ref) {\n  var _b = _a,\n      {\n    defaultChecked = false,\n    checked: checkedProp,\n    className,\n    onChange = noop,\n    disabled = false\n  } = _b,\n      rest = __objRest(_b, [\"defaultChecked\", \"checked\", \"className\", \"onChange\", \"disabled\"]);\n\n  const [checked, setChecked] = useControlled({\n    controlled: checkedProp,\n    default: defaultChecked,\n    name: \"SelectablePill\",\n    state: \"checked\"\n  });\n  const handleClick = useCallback(event => {\n    setChecked(!checked);\n    onChange(event, !checked);\n  }, [checked, onChange, setChecked]);\n  return /* @__PURE__ */jsx(PillBase, __spreadProps(__spreadValues({\n    \"aria-checked\": checked,\n    \"aria-roledescription\": \"Selectable Pill\",\n    clickable: true,\n    disabled,\n    className: cx(withBaseName(`selectable`), className, {\n      [withBaseName(`checked`)]: checked\n    }),\n    icon: /* @__PURE__ */jsx(PillCheckbox, {\n      checked\n    }),\n    role: \"checkbox\",\n    onClick: handleClick\n  }, rest), {\n    ref\n  }));\n});\nexport { SelectablePill };","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AAAA,IAAOA,aAAUC,MAAM,iBAAvB;AACA,qBAA8BC,SAAuB,0BAArD;AACA,IAASC,mBAAoB,+BAA7B;AACA,IAASC,eAA+BH,+BAAxC;AACA,IAASI,qBAAoB,UAApBA,CAAoBC,oBAA7B;;AACA,mBAAqB,IAAEC,GAAF,EAAeC,GAAf,EAAeC,KAAf,KAAeD,aAAmBE;EAAAC;EAAAC;EAAAC;EAAAJ;AAAA,EAAnB,GAAmBK,gBAAvD;;AAEA,IAAMC,cAAsB;EAAC,gCAmB7B,gBAAqBC,KAArB,CAAqBA,CAArB,EAAqBA,IAArB,GAEAC,eAA2B,kBAA3B;;EAWE,yBACEC,iBAAuBC,sBAAvBD,EAAuB;IACvBE,gBAAuB,KAAvBA,CAAuBC,CAAvBD,EAAuBE,IAAvBF,GACAG,eAAsB,kBAAtBA;EACAC;EACD,OAAEC,CAAF;AAED,CAvCF;;AAyCMC,oBAAYC,CAAOF,CAAPE,EAAON,CAAPM,KAASC,mCAArBF;;AACAG,gBAAQ,CAACC,MAAD,EAASH,OAAT,KAAkB;MAE5BI;;WAAQT,oBAAEO,YAAQ,KAARA,CAAQG,MAARH,EAAQP,IAARO,KAAQI,iCAAY;;EAAC,IAChCD,MAAC,QAAD,IAACb,mBAD+B,EAGjC,oCACW,QADX,EACW;IACPe,oBAAqBZ,IAArBY,IAAqB,CAArBA,IAAqBC,+BAArBD,EACAE,sBAAoBd,IAApBc;;EAEAC;CAVAR;;AAiBC,aAAO,YAAP;;AACDS,kBAAQ,6BAARA;AAEF;EACF,IAACC,OAAD;EAAA,IAAC;IAAAC;IAAAb;IAAAc;IAAAZ;IAAAQ;EAAA,MAAD;EAAA,IAACK,wFAAD;;;;;;;;;;;;;;;;;;;;;;;;;;;;CADE","names":["classnames","Object","forwardRef","pillBaseName","PillBase","PillCheckbox","propertyIsEnumerable","useControlled","key","value","__defProp","enumerable","configurable","writable","obj","noop","makePrefixer","__defNormalProp","controlled","__getOwnPropSymbols","default","b","prop","name","state","a","setChecked","checked","__defProps","onChange","event","target","source","exclude","aria-checked","__propIsEnum","aria-roledescription","disabled","ref","_b","defaultChecked","className","rest"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/pill/SelectablePill.tsx"],"sourcesContent":["import classnames from \"classnames\";\nimport React, { ForwardedRef, forwardRef, useCallback } from \"react\";\nimport { pillBaseName } from \"./constants\";\nimport { PillBase, PillBaseProps } from \"./internal/PillBase\";\nimport { PillCheckbox } from \"./internal/PillCheckbox\";\nimport { makePrefixer, useControlled } from \"../utils\";\n\nconst noop = () => undefined;\n\nexport interface SelectablePillProps extends Omit<PillBaseProps, \"onChange\"> {\n  /**\n   * Controls whether the selectable pill is checked\n   */\n  checked?: boolean;\n  /**\n   * Uncontrolled prop to determine initial state of selectable pill\n   */\n  defaultChecked?: boolean;\n  // TODO: API Alignment.\n  // - Reverted param order to keep event as first param\n  /**\n   * Callback when checked state is changed\n   */\n  onChange?: (event: React.ChangeEvent, checked: boolean) => void;\n}\n\nconst withBaseName = makePrefixer(pillBaseName);\n\nexport const SelectablePill = forwardRef(function SelectablePill(\n  {\n    defaultChecked = false,\n    checked: checkedProp,\n    className,\n    onChange = noop,\n    disabled = false,\n    ...rest\n  }: SelectablePillProps,\n  ref: ForwardedRef<HTMLDivElement>\n) {\n  const [checked, setChecked] = useControlled({\n    controlled: checkedProp,\n    default: defaultChecked,\n    name: \"SelectablePill\",\n    state: \"checked\",\n  });\n\n  const handleClick = useCallback(\n    (event) => {\n      setChecked(!checked);\n      onChange(event, !checked);\n    },\n    [checked, onChange, setChecked]\n  );\n\n  return (\n    <PillBase\n      aria-checked={checked}\n      aria-roledescription=\"Selectable Pill\"\n      clickable\n      disabled={disabled}\n      className={classnames(withBaseName(`selectable`), className, {\n        [withBaseName(`checked`)]: checked,\n      })}\n      icon={<PillCheckbox checked={checked} />}\n      role=\"checkbox\"\n      onClick={handleClick}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n"]},"metadata":{},"sourceType":"module"}