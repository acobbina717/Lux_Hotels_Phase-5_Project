{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport { createContext, useState, useEffect, useContext } from 'react';\nconst ViewportContext = /* @__PURE__ */createContext(0);\n\nconst ViewportProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const [viewport, setViewport] = useState(0);\n  useEffect(() => {\n    const observer = new ResizeObserver(observerEntries => {\n      setViewport(observerEntries[0].contentRect.width);\n    });\n    observer.observe(document.body);\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n  return /* @__PURE__ */jsx(ViewportContext.Provider, {\n    value: viewport,\n    children\n  });\n};\n\nconst useViewport = () => {\n  return useContext(ViewportContext);\n};\n\nexport { ViewportContext, ViewportProvider, useViewport };","map":{"version":3,"mappings":";;AAEA,MAAMA,eAAe,kBAAGC,aAAe,CAAC,CAAD,CAAvC;;AAEA,MAAMC,gBAAgB,GAAO,QAAkB;EAAA,IAAjB;IAAEC;EAAF,CAAiB;QACvC,WAASC,WAAT,IAAsBC,QAAY;EAExCC,gBAAgB;IACd,qBAAiBC,cAAjB,CAAiBC,mBAC6B;iBAC/B,gBAAgB,GAAhB,CAAgBC,WAAhB,CAA+BC,KAA/B;IACZ,CAHH;IAKAC,iBAAgBC,aAAhBD;IACA,aAAa;cACH;KADV;GAPFL,EAUC,EAVDA;wBAaEO,IAACb,eAAe,CAACc,QAAjB,EAAyB;IAACC,eAAD;;EAAA,CAAzB;CAhBJ;;AAsBMC,iBAAW,GAAG,MAAM;EACxB,iBAAiB,iBAAjB;CADIA","names":["ViewportContext","createContext","ViewportProvider","children","setViewport","useState","useEffect","ResizeObserver","observerEntries","contentRect","width","observer","document","_jsx","Provider","value","useViewport"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/viewport/ViewportProvider.tsx"],"sourcesContent":["import { createContext, FC, useEffect, useState, useContext } from \"react\";\n\nconst ViewportContext = createContext(0);\n\nconst ViewportProvider: FC = ({ children }) => {\n  const [viewport, setViewport] = useState(0);\n\n  useEffect(() => {\n    const observer = new ResizeObserver(\n      (observerEntries: ResizeObserverEntry[]) => {\n        setViewport(observerEntries[0].contentRect.width);\n      }\n    );\n    observer.observe(document.body);\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return (\n    <ViewportContext.Provider value={viewport}>\n      {children}\n    </ViewportContext.Provider>\n  );\n};\n\nconst useViewport = () => {\n  return useContext(ViewportContext);\n};\n\nexport { ViewportProvider, ViewportContext, useViewport };\n"]},"metadata":{},"sourceType":"module"}