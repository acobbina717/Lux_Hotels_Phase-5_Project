{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport cx from 'classnames';\nimport { forwardRef } from 'react';\nimport { FormGroup } from '../form-group/FormGroup.js';\nimport { useControlled } from '../utils/useControlled.js';\nimport '../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../theme/Theme.js';\nimport { CheckboxGroupContext } from './internal/CheckboxGroupContext.js';\nimport './CheckboxGroup.css.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst classBase = \"uitkCheckboxGroup\";\nconst CheckboxGroup = /* @__PURE__ */forwardRef(function CheckboxGroup2(_a, ref) {\n  var _b = _a,\n      {\n    checkedValues: checkedValuesProp,\n    defaultCheckedValues = [],\n    children,\n    className,\n    FormControlProps,\n    row,\n    name: name1,\n    onChange\n  } = _b,\n      other = __objRest(_b, [\"checkedValues\", \"defaultCheckedValues\", \"children\", \"className\", \"FormControlProps\", \"row\", \"name\", \"onChange\"]);\n\n  const [checkedValues, setCheckedValues] = useControlled({\n    controlled: checkedValuesProp,\n    default: defaultCheckedValues,\n    name: \"CheckboxGroup\",\n    state: \"checkedValues\"\n  });\n\n  const handleChange = event => {\n    setCheckedValues(function () {\n      let oldValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      const name = event.target.value;\n      const isSelected = oldValues.includes(name);\n      return isSelected ? oldValues.filter(value => value !== name) : oldValues.concat(name);\n    });\n    onChange == null ? void 0 : onChange(event);\n  };\n\n  return /* @__PURE__ */jsx(CheckboxGroupContext.Provider, {\n    value: {\n      name: name1,\n      onChange: handleChange,\n      checkedValues\n    },\n    children: /* @__PURE__ */jsx(\"fieldset\", {\n      className: cx(classBase, {\n        [`${classBase}-horizontal`]: row\n      }),\n      ref,\n      children: /* @__PURE__ */jsx(FormGroup, __spreadProps(__spreadValues({\n        className: `${classBase}-formGroup`,\n        row\n      }, other), {\n        children\n      }))\n    })\n  });\n});\nexport { CheckboxGroup };","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AAAA,IAAOA,UAAQ,0BAAf;AACA,IAGEC,iBAGK,mCANP;AAOA,IAASC,mBAAiC,+BAA1C;AACA,IAASC,qBAAqB,UAArBA,CAAqBC,cAA9B;AACA,IAASC,gCAA4BC,oBAArC;;AAEA,4BAA4BC,GAA5B,EAA6BC,KAA7B,KAA6BD;EAAAE;EAAAC;EAAAC;EAAAH;AAAA,qBAA7B;;AAkCA,IAAMI,cAAY;EAEX,wBAAmB,GAAGX,EAAtB,GAiBL,gBAAoB,KAApB,CAAsBY,CAAtB,EAAsBA,IAAtB,GACEC,eAA6B,kBAA7BA;;EACAC,yBACAC,iBAAqBC,sBAArBD,EAAqB;IACrBE,gBAAsB,KAAtBA,CAAsBC,CAAtBD,EAAsBE,IAAtBF,GACCG;EAEH;EACER;AACE,CA5BN;;iBA6BYS,uBAAsB,CAACC,CAAD,EAACA,iBAAe,GAAhB;;aAErBD,wBACHE;EAA0C;;EAE/C,SAAEJ,IAAF,IAAEK,MAAF,MAEDC,YAAgB,KAAhBA,CAAkBD,MAAlBC,EAAkBN,IAAlBM,KAAkBC,2BAClBC;;MAGAH,uCACEjB,SAAKY,IAALZ,IAAOS,2BAAPT,EAAO;IAAEQ,oBAAII,IAAJJ,IAAI,CAAJA,IAAIa,+BAAJb,EAAMU,eAAsBD,YAAtBC;;EAAuC;AAEtD;;AAM6D;mBACxDI,kBAAQ7B;EACC;EAAA;IAAA8B;IAAAC;IAAAF;IAAAG;IAAAC;IAAAC;IAAAnB;IAAAU;EAAA;EAAA;;EACH;cAEb,mBAFa;IAGdX,6BAHc;yBAAA;;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAFE","names":["cx","forwardRef","FormGroup","useControlled","hasOwnProperty","CheckboxGroupContext","propertyIsEnumerable","key","value","enumerable","configurable","writable","classBase","setCheckedValues","controlled","default","name","__getOwnPropSymbols","state","b","prop","__defNormalProp","isSelected","includes","oldValues","source","onChange","exclude","target","__propIsEnum","children","checkedValues","defaultCheckedValues","className","FormControlProps","row"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/checkbox/CheckboxGroup.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport {\n  ChangeEvent,\n  ChangeEventHandler,\n  forwardRef,\n  HTMLAttributes,\n  ReactNode,\n} from \"react\";\nimport { FormGroup, FormGroupProps } from \"../form-group\";\nimport { useControlled } from \"../utils\";\nimport { CheckboxGroupContext } from \"./internal/CheckboxGroupContext\";\n\nimport \"./CheckboxGroup.css\";\n\nexport interface CheckboxGroupProps extends FormGroupProps {\n  /**\n   * The current checked options.\n   */\n  checkedValues?: string[];\n  /**\n   * The default selected options for un-controlled component.\n   */\n  defaultCheckedValues?: string[];\n  /**\n   * Props spread onto the FormControl component that wraps the checkboxes.\n   */\n  FormControlProps?: Partial<HTMLAttributes<HTMLFieldSetElement>>;\n  /**\n   * Props spread onto the legend.\n   */\n  LegendProps?: unknown;\n  /**\n   * The label for the group legend\n   */\n  legend?: ReactNode;\n  /**\n   * The name used to reference the value of the control.\n   */\n  name?: string;\n  /**\n   * Callback fired when a checkbox is clicked.\n   * `event.target.value` returns the value of the checkbox that was clicked.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n}\n\nconst classBase = \"uitkCheckboxGroup\";\n\nexport const CheckboxGroup = forwardRef<\n  HTMLFieldSetElement,\n  CheckboxGroupProps\n>(function CheckboxGroup(\n  {\n    checkedValues: checkedValuesProp,\n    defaultCheckedValues = [],\n    children,\n    className,\n    FormControlProps,\n    row,\n    name,\n    onChange,\n    ...other\n  },\n  ref\n) {\n  const [checkedValues, setCheckedValues] = useControlled({\n    controlled: checkedValuesProp,\n    default: defaultCheckedValues,\n    name: \"CheckboxGroup\",\n    state: \"checkedValues\",\n  });\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setCheckedValues((oldValues: string[] = []) => {\n      const name = event.target.value;\n      const isSelected = oldValues.includes(name);\n\n      return isSelected\n        ? oldValues.filter((value) => value !== name)\n        : oldValues.concat(name);\n    });\n\n    onChange?.(event);\n  };\n\n  return (\n    <CheckboxGroupContext.Provider\n      value={{ name, onChange: handleChange, checkedValues }}\n    >\n      <fieldset\n        className={cx(classBase, {\n          [`${classBase}-horizontal`]: row,\n        })}\n        ref={ref}\n      >\n        <FormGroup className={`${classBase}-formGroup`} row={row} {...other}>\n          {children}\n        </FormGroup>\n      </fieldset>\n    </CheckboxGroupContext.Provider>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}