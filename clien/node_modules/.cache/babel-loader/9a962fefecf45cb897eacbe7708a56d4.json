{"ast":null,"code":"import { useBreakpoints } from '../toolkit-provider/ToolkitProvider.js';\nimport { useViewport } from '../viewport/ViewportProvider.js';\n\nconst getCurrentBreakpoint = (breakpoints, width) => {\n  const breakpointList = Object.entries(breakpoints);\n  const [currentBreakpoint] = breakpointList.reduce((acc, val) => {\n    const [_, accWidth] = acc;\n    const [breakpoint, breakpointWidth] = val;\n\n    if (breakpointWidth < width && breakpointWidth > accWidth) {\n      return [breakpoint, breakpointWidth];\n    }\n\n    return [...acc];\n  }, breakpointList[0]);\n  return currentBreakpoint;\n};\n\nconst useCurrentBreakpoint = () => {\n  const viewport = useViewport();\n  const breakpoints = useBreakpoints();\n  return getCurrentBreakpoint(breakpoints, viewport);\n};\n\nconst useOrderedBreakpoints = () => {\n  const breakpoints = useBreakpoints();\n  const orderedBreakpoints = Object.entries(breakpoints).sort((_ref, _ref2) => {\n    let [, a] = _ref;\n    let [, b] = _ref2;\n    return a - b;\n  }).map(_ref3 => {\n    let [key] = _ref3;\n    return key;\n  });\n  return orderedBreakpoints;\n};\n\nconst isObject = value => {\n  const type = typeof value;\n  return value !== null && (type === \"object\" || type === \"function\");\n};\n\nconst hasBreakpointValues = (value, breakpoints) => {\n  return isObject(value) && Object.keys(value).every(key => key in breakpoints);\n};\n\nconst getResponsiveValue = (breakpointValues, breakpoints, viewport, defaultValue) => {\n  const value = Object.entries(breakpointValues).reduce((acc, val) => {\n    const [accWidth] = acc;\n    const [breakpoint, breakpointValue] = val;\n    const breakpointWidth = breakpoints[breakpoint];\n\n    if (breakpointWidth >= accWidth && breakpointWidth <= breakpoints[viewport]) {\n      return [breakpointWidth, breakpointValue];\n    }\n\n    return acc;\n  }, [0, defaultValue])[1];\n  return value;\n};\n\nconst useResponsiveProp = (value, defaultValue) => {\n  const breakpoints = useBreakpoints();\n  const viewport = useViewport();\n  const currentViewport = getCurrentBreakpoint(breakpoints, viewport);\n\n  if (hasBreakpointValues(value, breakpoints)) {\n    return getResponsiveValue(value, breakpoints, currentViewport, defaultValue);\n  }\n\n  return value;\n};\n\nexport { getCurrentBreakpoint, useCurrentBreakpoint, useOrderedBreakpoints, useResponsiveProp };","map":{"version":3,"mappings":";;;MAUaA,oBAAoB,GAAG,CAClCC,WADkC,EAElCC,KAFkC,KAG/B;QACGC,uBAAuB,QAAvBA,CAAuBF,WAAvBE;EAEN,4BAAyBA,cACvBA,OADuB,CAEvBC,CAAMC,GAAND,EAAWE,GAAXF,KAAqB;IACrB,UAAMG,QAAN,IAAkBF,GAAlB;IACA,mBAAiBG,eAAjB,IAAkCF,GAAlC;;IACA,+BAA2BE,eAAmB,WAA9C,EAA8C;aACrC;IACR;;WACM;EACR,CATwB,EASxBL,cAAgB,GATQ,CAAzB;EAWA;;;AAGK,MAAMM,oBAAoB,GAAG,MAAM;EACxC,cAAc,cAAc,EAA5B;EAEA,iBAAiB,iBAAiB,EAAlC;EAEA,yCAAuCC,QAAvC;CALK;;AAQA,MAAMC,qBAAqB,GAAG,MAAM;EACzC,iBAAiB,iBAAiB,EAAlC;QAEMC,2BAA2B,QAA3BA,CAA2BX,WAA3BW,EAA+CC,IAA/CD,CACC;IAAA,OAAKE,CAAL;IAAA,IAAO,GAAEC,CAAF,CAAP;IAAA,OAAmBD,CAAC,GAAGC,CAAvB;EAAA,CADDH,EACyBI,GADzBJ,CACyB;IAAA;IAAA;EAAA,CADzBA;SAEAA;AAAe,CALhB;;AAOL;EACA;EAEF,OAAcK,UACZA,IADY,KAEuCC,wCAFvC,CAAd;AAGE,CANA;;AAOA,yBAAqB,IAAID,KAAJ,EAAchB,WAAd,KAA0BiB;EAC/C;AAEF,CAHE;;AAOA,wBACWD,GAAUE,gCAA6BT,QAA7BS,EAAyClB,YAAzCkB,KAAoD;EAAA,MACvEF;IACF;IAEIG,sCAC+Bd,GAD/Bc;IAMJ,MAAMH,eAAeI,cAAQC,YAA7B;;IAII,mBAAe,IAAIjB,QAAnB,IAAuBG,wCAAvB,EAAuB;MACvB,QAEAA,eAFA,EAKAe,eALA;;;;GAdF,GAwBG,GAEDC,aA1BF,EA2BC,CA3BD,CADuE;EA6BrE;CA9BJ;;AA+BK;EAEL,iBAAa,mBAAb;EACA;EAEF,qBAA8B,qCAGzBd,QAHyB,CAA9B;;EAIE,uBAAkC,oBAAlC,EAAqC;IACrC,OAAcU,kBAAc,QAAGnB,WAAH,EAAGwB,eAAH,EAAGD,YAAH,CAA5B;;;EAIA;CAdK","names":["getCurrentBreakpoint","breakpoints","width","breakpointList","reduce","acc","val","accWidth","breakpointWidth","useCurrentBreakpoint","viewport","useOrderedBreakpoints","orderedBreakpoints","sort","a","b","map","value","type","Object","getResponsiveValue","entries","breakpointValues","breakpointValue","defaultValue","currentViewport"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/utils/useResponsiveProp.ts"],"sourcesContent":["import { Breakpoints } from \"../breakpoints\";\nimport { useBreakpoints } from \"../toolkit-provider\";\nimport { useViewport } from \"../viewport\";\n\ntype BreakpointProp<T> = {\n  [K in keyof Breakpoints]?: T;\n};\n\nexport type ResponsiveProp<T> = T | BreakpointProp<T>;\n\nexport const getCurrentBreakpoint = (\n  breakpoints: Breakpoints,\n  width: number\n) => {\n  const breakpointList = Object.entries(breakpoints);\n\n  const [currentBreakpoint] = (\n    breakpointList as [keyof Breakpoints, number][]\n  ).reduce((acc, val) => {\n    const [_, accWidth] = acc;\n    const [breakpoint, breakpointWidth] = val;\n    if (breakpointWidth < width && breakpointWidth > accWidth) {\n      return [breakpoint, breakpointWidth];\n    }\n    return [...acc];\n  }, breakpointList[0] as [keyof Breakpoints, number]);\n\n  return currentBreakpoint;\n};\n\nexport const useCurrentBreakpoint = () => {\n  const viewport = useViewport();\n\n  const breakpoints = useBreakpoints();\n\n  return getCurrentBreakpoint(breakpoints, viewport);\n};\n\nexport const useOrderedBreakpoints = () => {\n  const breakpoints = useBreakpoints();\n\n  const orderedBreakpoints = Object.entries(breakpoints)\n    .sort(([, a], [, b]) => a - b)\n    .map(([key]) => key);\n\n  return orderedBreakpoints;\n};\n\nconst isObject = <T>(\n  value: T\n): value is Record<string | number | symbol, any> => {\n  const type = typeof value;\n  return value !== null && (type === \"object\" || type === \"function\");\n};\n\nconst hasBreakpointValues = <T>(\n  value: ResponsiveProp<T>,\n  breakpoints: Breakpoints\n): value is BreakpointProp<T> => {\n  return (\n    isObject(value) && Object.keys(value).every((key) => key in breakpoints)\n  );\n};\n\nconst getResponsiveValue = <T>(\n  breakpointValues: BreakpointProp<T>,\n  breakpoints: Breakpoints,\n  viewport: keyof Breakpoints,\n  defaultValue: T\n) => {\n  const value = Object.entries(breakpointValues).reduce<\n    [number, T] | [never, unknown]\n  >(\n    (acc, val) => {\n      const [accWidth] = acc;\n      const [breakpoint, breakpointValue] = val;\n\n      const breakpointWidth =\n        breakpoints[breakpoint as keyof typeof breakpoints];\n\n      if (\n        breakpointWidth >= accWidth &&\n        breakpointWidth <= breakpoints[viewport]\n      ) {\n        return [breakpointWidth, breakpointValue];\n      }\n\n      return acc;\n    },\n    [0, defaultValue]\n  )[1];\n\n  return value;\n};\n\nexport const useResponsiveProp = <T>(\n  value: ResponsiveProp<T>,\n  defaultValue: T\n) => {\n  const breakpoints = useBreakpoints();\n  const viewport = useViewport();\n\n  const currentViewport = getCurrentBreakpoint(breakpoints, viewport);\n\n  if (hasBreakpointValues(value, breakpoints)) {\n    return getResponsiveValue(\n      value,\n      breakpoints,\n      currentViewport,\n      defaultValue\n    );\n  }\n  return value;\n};\n"]},"metadata":{},"sourceType":"module"}