{"ast":null,"code":"import { useRef, useState, useEffect, useCallback } from 'react';\n\nfunction useControlled(_ref) {\n  let {\n    controlled,\n    default: defaultProp,\n    name,\n    state = \"value\"\n  } = _ref;\n  const {\n    current: isControlled\n  } = useRef(controlled !== void 0);\n  const [valueState, setValue] = useState(defaultProp);\n  const value = isControlled ? controlled : valueState;\n  const {\n    current: defaultValue\n  } = useRef(defaultProp);\n  useEffect(() => {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (isControlled !== (controlled !== void 0)) {\n        console.error([`UI-Toolkit: A component is changing the ${isControlled ? \"\" : \"un\"}controlled ${state} state of ${name} to be ${isControlled ? \"un\" : \"\"}controlled.`, \"Elements should not switch from uncontrolled to controlled (or vice versa).\", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, \"The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.\", \"More info: https://fb.me/react-controlled-components\"].join(\"\\n\"));\n      }\n    }\n\n    return void 0;\n  }, [state, name, controlled]);\n  useEffect(() => {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!isControlled && defaultValue !== defaultProp) {\n        console.error([`UI-Toolkit: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join(\"\\n\"));\n      }\n    }\n\n    return void 0;\n  }, [JSON.stringify(defaultProp)]);\n  const setValueIfUncontrolled = useCallback(newValue => {\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  }, []);\n  return [value, setValueIfUncontrolled, isControlled];\n}\n\nexport { useControlled };","map":{"version":3,"mappings":";;AA4BA;EAAA;IAAAA;IAAAC;IAAAC;IAAAC;EAAA;;;;;QAIAC,oBAA6B,gBACjBC;EAKV;IAAMC,OAAEA,EAAOC;EAAf,IAA+BC,MAAGA,aAAlC;WACOH,CAAU;IACjB,WAAW,CAAGI,GAAd,CAAcA,QAAd,KAA6BT,YAA7B,EAAuC;MACjC,gBAAuB,gBAAE,KAAS,KAAY,CAAvB,CAAvB,EAA8C;QAEpDU,OAAgB,MAAhBA,CAAgB,CACd,2CAA2CD,2GAD7B,EAEZ,6EAFY,uDAIRP,iDAJQ,wLAWNS,IAXM,CAWN,IAXM,CAAhBD;;;;IAeS;EAEJ,CArBEL,EAqBF,CACFF,KADE,EAEHD,IAFG,EAGHF,UAHG,CArBEK;WAyBQ;QAAEL,OAAU,IAAVA,CAAUY,QAAVZ,KAAU;MAAE,IAAC,6CAAD,EAAC;QAE9BU,OAAgB,MAAhBA,CAAgB,CACd,mDAA2CP,2HAD7B,EAEZQ,IAFY,CAEZ,IAFY,CAAhBD;;IAKU;;IAED;EAEJ,CAXU,EAWV,CACFG,2BADE,CAXU;EAcb;IACEA,mBAAeC;MAAcC,QAAC,UAAD;IAEjC;GAHE;UAMCX,OACDY,wBAGFP","names":["controlled","default","name","state","value","valueState","current","defaultValue","useRef","isControlled","useEffect","join","NODE_ENV","JSON","defaultProp","setValue","setValueIfUncontrolled"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/utils/useControlled.ts"],"sourcesContent":["import {\n  Dispatch,\n  SetStateAction,\n  useRef,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\";\n\nexport interface UseControlledProps<T = unknown> {\n  /**\n   * Holds the component value when it's controlled.\n   */\n  controlled: T | undefined;\n  /**\n   * The default value when uncontrolled.\n   */\n  default: T | undefined;\n  /**\n   * The component name displayed in warnings.\n   */\n  name: string;\n  /**\n   * The name of the state variable displayed in warnings.\n   */\n  state?: string;\n}\n\n/**\n * Copied from MUI (v5) useControlled hook with one additional returned value\n * @see https://github.com/mui-org/material-ui/blob/0979e6a54ba47c278d1f535953c0520a86349811/packages/material-ui-utils/src/useControlled.js\n */\nexport function useControlled<S = unknown>({\n  controlled,\n  default: defaultProp,\n  name,\n  state = \"value\",\n}: UseControlledProps<S>): [S, Dispatch<SetStateAction<S>>, boolean] {\n  const { current: isControlled } = useRef(controlled !== undefined);\n  const [valueState, setValue] = useState(defaultProp);\n  const value = isControlled ? controlled : valueState;\n  const { current: defaultValue } = useRef(defaultProp);\n\n  useEffect(() => {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (isControlled !== (controlled !== undefined)) {\n        console.error(\n          [\n            `UI-Toolkit: A component is changing the ${\n              isControlled ? \"\" : \"un\"\n            }controlled ${state} state of ${name} to be ${\n              isControlled ? \"un\" : \"\"\n            }controlled.`,\n            \"Elements should not switch from uncontrolled to controlled (or vice versa).\",\n            `Decide between using a controlled or uncontrolled ${name} ` +\n              \"element for the lifetime of the component.\",\n            \"The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.\",\n            \"More info: https://fb.me/react-controlled-components\",\n          ].join(\"\\n\")\n        );\n      }\n    }\n    return undefined;\n    /* eslint-disable-next-line react-hooks/exhaustive-deps */\n  }, [state, name, controlled]);\n\n  useEffect(() => {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!isControlled && defaultValue !== defaultProp) {\n        console.error(\n          [\n            `UI-Toolkit: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` +\n              `To suppress this warning opt to use a controlled ${name}.`,\n          ].join(\"\\n\")\n        );\n      }\n    }\n    return undefined;\n    /* eslint-disable-next-line react-hooks/exhaustive-deps */\n  }, [JSON.stringify(defaultProp)]);\n\n  const setValueIfUncontrolled = useCallback((newValue) => {\n    if (!isControlled) {\n      setValue(newValue);\n    }\n    /* eslint-disable-next-line react-hooks/exhaustive-deps */\n  }, []);\n\n  return [value!, setValueIfUncontrolled, isControlled];\n}\n"]},"metadata":{},"sourceType":"module"}