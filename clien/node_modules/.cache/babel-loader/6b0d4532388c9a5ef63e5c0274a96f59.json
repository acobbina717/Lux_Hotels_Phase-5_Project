{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst NecessityIndicator = _a => {\n  var _b = _a,\n      {\n    required,\n    children,\n    necessityText: necessityTextProp = children,\n    displayedNecessity,\n    className\n  } = _b,\n      restProps = __objRest(_b, [\"required\", \"children\", \"necessityText\", \"displayedNecessity\", \"className\"]);\n\n  let necessityText = \"\";\n\n  if (necessityTextProp) {\n    necessityText = necessityTextProp;\n  } else {\n    if (required && displayedNecessity === \"required\") {\n      necessityText = `(Required)`;\n    } else if (!required && displayedNecessity === \"optional\") {\n      necessityText = `(Optional)`;\n    }\n  }\n\n  if (necessityText) {\n    return /* @__PURE__ */jsx(\"span\", __spreadProps(__spreadValues({\n      className,\n      \"data-testid\": \"necessity-indicator\"\n    }, restProps), {\n      children: necessityText\n    }));\n  }\n\n  return null;\n};\n\nexport { NecessityIndicator };","map":{"version":3,"mappings":";AAAA;AAAA,IAAOA,UAA0C,0BAAjD;AAwBA,IAAOC,iBAAwB,mCAA/B;IAQEC,mBAA+B,GAAEC,MAAC;AAElC,yBAAqB,CAAEC,SAAvB,CAAuBC,cAAvB;gBACe;;mBACR;EAAAC;EAAAC;EAAAC;EAAAC;AAAA;;AACL,kBAAY,OAAsBC,CAAtB,KAAsB;EAChCC,uBAAaD,CAAG,GAAC,EAAjBC,GACD,gBAAWC,KAAX,CAAWA,CAAX,EAAWA,IAAX,GACCD,mBAAaE,IAAbF,EAA2BD,OAA3BC;;EACD,yBACF;IAED,gBAAmB,KAAnB,CAAmBD,CAAnB,EAAmBG,IAAnB,GACEC,0BACGC,CAAIF,IAAJE,CADH;EAEIC;EACAC;AACC,CAZL;;wBAckBP;;aAEhB;EACH;;EACD,SAAOG,IAAP,IAAYK,MAAZ,EACA","names":["React","__getOwnPropDescs","__getOwnPropSymbols","Object","prototype","hasOwnProperty","enumerable","configurable","writable","value","b","necessityText","required","prop","__defNormalProp","span","className","data-testid","source"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/form-field/NecessityIndicator.tsx"],"sourcesContent":["import React, { HTMLAttributes, ReactNode } from \"react\";\n\nexport type FormLabelNecessity = \"optional\" | \"required\";\n// export type FormLabelNecessityStyle = 'full' | 'abbreviated';\n\nexport interface NecessityIndicatorOptions {\n  /**\n   * The FormField is required\n   */\n  required?: boolean;\n  /**\n   * Whether to show a label adornment for required or optional\n   */\n  displayedNecessity?: FormLabelNecessity;\n  // This API is removed as this is not flexible enough.\n  // User could always use `necessityText` to display more customized text, e.g. in other language.\n  // necessityStyle?: FormLabelNecessityStyle;\n  /**\n   * Customize text displayed for necessity. Default to `(Required)` or `(Optional)`.\n   */\n  necessityText?: ReactNode;\n  className?: string;\n}\n\nexport const NecessityIndicator = ({\n  required,\n  children,\n  necessityText: necessityTextProp = children,\n  displayedNecessity,\n  className,\n  ...restProps\n}: NecessityIndicatorOptions & HTMLAttributes<HTMLSpanElement>) => {\n  let necessityText: ReactNode = \"\";\n\n  if (necessityTextProp) {\n    necessityText = necessityTextProp;\n  } else {\n    if (required && displayedNecessity === \"required\") {\n      necessityText = `(Required)`;\n    } else if (!required && displayedNecessity === \"optional\") {\n      necessityText = `(Optional)`;\n    }\n  }\n\n  if (necessityText) {\n    return (\n      <span\n        className={className}\n        data-testid=\"necessity-indicator\"\n        {...restProps}\n      >\n        {necessityText}\n      </span>\n    );\n  }\n  return null;\n};\n"]},"metadata":{},"sourceType":"module"}