{"ast":null,"code":"import { jsxs, jsx } from 'react/jsx-runtime';\nimport cx from 'classnames';\nimport 'react';\nimport { makePrefixer } from '../utils/makePrefixer.js';\nimport '../aria-announcer/AriaAnnouncerContext.js';\nimport 'warning';\nimport '../theme/Theme.js';\nimport { NecessityIndicator } from './NecessityIndicator.js';\nimport { StatusIndicator } from './StatusIndicator.js';\nimport './FormLabel.css.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst withBaseName = makePrefixer(\"uitkFormLabel\");\n\nconst FormLabel = _a => {\n  var _b = _a,\n      {\n    label,\n    NecessityIndicator: NecessityIndicator$1 = NecessityIndicator,\n    required,\n    displayedNecessity,\n    hasStatusIndicator = false,\n    StatusIndicatorProps,\n    validationState,\n    necessityText,\n    className,\n    disabled,\n    readOnly,\n    tooltipText\n  } = _b,\n      restProps = __objRest(_b, [\"label\", \"NecessityIndicator\", \"required\", \"displayedNecessity\", \"hasStatusIndicator\", \"StatusIndicatorProps\", \"validationState\", \"necessityText\", \"className\", \"disabled\", \"readOnly\", \"tooltipText\"]);\n\n  return /* @__PURE__ */jsxs(\"label\", __spreadProps(__spreadValues({\n    className: cx(withBaseName(), className, {\n      [withBaseName(\"disabled\")]: disabled\n    })\n  }, restProps), {\n    children: [label, /* @__PURE__ */jsx(NecessityIndicator$1, {\n      required,\n      displayedNecessity,\n      necessityText,\n      className: withBaseName(\"necessityIndicator\")\n    }), hasStatusIndicator && /* @__PURE__ */jsx(StatusIndicator, __spreadValues({\n      className: withBaseName(\"statusIndicator\"),\n      state: validationState,\n      tooltipText,\n      hasTooltip: true\n    }, StatusIndicatorProps))]\n  }));\n};\n\nexport { FormLabel };","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AAAA,IAAOA,UAAQ,0BAAf;AAEA,IAASC,iBAAY,GAAQC,gCAA7B;AAEA,uBACoB,SAA6B,sBADjD;AAIA,IAASC,qBAA6C,UAA7CA,CAA6CC,cAAtD;AAEA,yBAAyB,UAAzB,CAAyBC,oBAAzB;;AAEA,mBAAqBJ,cAAYK,KAAZL,KAAaM,OAAgBC,GAAhB,GAAiBC;EAAAC;EAAAC;EAAAC;EAAAN;AAAA,EAAjB,GAAiBE,gBAAnD;;AAsCA,IAAOK,kBAAeC,CAAf,EAAkBC,CAAlB,KACA;EAeHC,iBAAWhB,CAAE,YAAbgB,EACE,sBAAcD,CAAd,EAAcE,IAAd,kBACA;;EACD;oBAEK,gBAENC,yBAAmBH,OAAnB;EACEI;EACAC;AACAC,CA1BN;;AA2BML,8BAAWM,UAAa,qBAAqB,GAArB,CAAxBN;;AACA;YACDO,GAAkB;;EAEfP,yBACAQ,iBAAKC,IAALD,CAAsBE,MAAtBF,EAAsBP,IAAtBO,KAAsBG,yBAAtBH,EACAI,qBAAW,MAAXA;;gBACAC,QAAUC,qBACT,iBAAuBA,2BAAvB,EAAuB;eAE3B;EACK;EACR;CAXI","names":["cx","makePrefixer","Object","StatusIndicator","hasOwnProperty","propertyIsEnumerable","value","key","obj","__defProp","enumerable","configurable","writable","__spreadValues","a","b","className","prop","__defNormalProp","required","displayedNecessity","necessityText","withBaseName","hasStatusIndicator","state","call","source","exclude","tooltipText","hasTooltip","__getOwnPropSymbols"],"sources":["/Users/forgi/Development/code/phase-5/lux_nyc_final_project/lux_nyc_react_frontend/node_modules/@jpmorganchase/uitk-core/dist-es/packages/core/src/src/form-field/FormLabel.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport { ElementType, HTMLAttributes } from \"react\";\nimport { makePrefixer } from \"../utils\";\nimport { FormFieldValidationState } from \"./FormField\";\nimport {\n  NecessityIndicator as DefaultNecessityIndicator,\n  NecessityIndicatorOptions,\n} from \"./NecessityIndicator\";\nimport { StatusIndicator, StatusIndicatorProps } from \"./StatusIndicator\";\n\nimport \"./FormLabel.css\";\n\nconst withBaseName = makePrefixer(\"uitkFormLabel\");\nexport interface FormLabelProps\n  extends HTMLAttributes<HTMLLabelElement>,\n    NecessityIndicatorOptions {\n  /**\n   * Whether the form field is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Adjusts whether the StatusIndicator component is shown\n   */\n  hasStatusIndicator?: boolean;\n  /**\n   * The label value for the FormLabel\n   */\n  label?: string;\n  /**\n   * An optional renderer function used to customize the necessity adornment\n   */\n  NecessityIndicator?: ElementType<NecessityIndicatorOptions>;\n  /**\n   * Whether the form field is readOnly.\n   */\n  readOnly?: boolean;\n  /**\n   * Props used to configure the StatusIndicator component if hasStatusIndicator is true\n   */\n  StatusIndicatorProps?: Partial<StatusIndicatorProps>;\n  /**\n   * The state for the FormField: Must be one of: 'error'|'warning'|undefined\n   */\n  validationState?: FormFieldValidationState;\n  /**\n   * Text to be shown in the Tooltip.\n   */\n  tooltipText?: string;\n}\n\nexport const FormLabel = ({\n  label,\n  NecessityIndicator = DefaultNecessityIndicator,\n  required,\n  displayedNecessity,\n  hasStatusIndicator = false,\n  StatusIndicatorProps,\n  validationState,\n  necessityText,\n  className,\n  disabled,\n  readOnly,\n  tooltipText,\n  ...restProps\n}: FormLabelProps) => (\n  <label\n    className={cx(withBaseName(), className, {\n      [withBaseName(\"disabled\")]: disabled,\n    })}\n    {...restProps}\n  >\n    {label}\n\n    <NecessityIndicator\n      required={required}\n      displayedNecessity={displayedNecessity}\n      necessityText={necessityText}\n      className={withBaseName(\"necessityIndicator\")}\n    />\n    {hasStatusIndicator && (\n      <StatusIndicator\n        className={withBaseName(\"statusIndicator\")}\n        state={validationState}\n        tooltipText={tooltipText}\n        hasTooltip\n        {...StatusIndicatorProps}\n      />\n    )}\n  </label>\n);\n"]},"metadata":{},"sourceType":"module"}